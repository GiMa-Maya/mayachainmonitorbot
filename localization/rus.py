from localization.base import BaseLocalization
from services.models.price import RuneFairPrice, PriceReport
from services.models.pool_info import PoolInfo
from services.models.cap_info import ThorInfo
from services.models.tx import StakeTx, short_asset_name, StakePoolStats
from services.lib.utils import link, code, bold, pre, x_ses
from services.lib.money import pretty_dollar, pretty_money, short_address, adaptive_round_to_str, calc_percent_change, \
    emoji_for_percent_change


class RussianLocalization(BaseLocalization):
    # ---- WELCOME ----
    def help(self):
        return (
            f"–≠—Ç–æ—Ç –±–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –∫—Ä—É–ø–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö —Å —Å–µ—Ç–∏ {link('https://thorchain.org/', 'THORChain')}.\n"
            f"–ö–æ–º–∞–Ω–¥—ã:\n"
            f"/help ‚Äì —ç—Ç–∞ –ø–æ–º–æ—â—å\n"
            f"/start ‚Äì –∑–∞–ø—É—Å–∫ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞\n"
            f"/cap ‚Äì —Ç–µ–∫—É—â–∏–π –∫–∞–ø –¥–ª—è —Å—Ç–µ–π–∫–∞ –≤ –ø—É–ª–∞—Ö Chaosnet\n"
            f"/price ‚Äì —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {self.R}.\n"
            f"<b>‚ö†Ô∏è –ë–æ—Ç —Ç–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µÔ∏è @thorchain_alert!</b>\n"
        )

    def welcome_message(self, info: ThorInfo):
        return (
            f"–ü—Ä–∏–≤–µ—Ç! <b>{info.stacked:.0f}</b> –º–æ–Ω–µ—Ç –∏–∑ <b>{info.cap:.0f}</b> —Å–µ–π—á–∞—Å –∑–∞—Å—Ç–µ–π–∫–∞–Ω—ã.\n"
            f"{self._cap_pb(info)}"
            f"–¶–µ–Ω–∞ {self.R} —Å–µ–π—á–∞—Å <code>{info.price:.3f} BUSD</code>.\n"
            f"<b>‚ö†Ô∏è –ë–æ—Ç —Ç–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µÔ∏è @thorchain_alert!</b>\n"
            f"–ù–∞–±–µ—Ä–∏ /help, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."
        )

    def unknown_command(self):
        return (
            "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.\n"
            "/help"
        )

    # ----- CAP ------
    def notification_cap_change_text(self, old: ThorInfo, new: ThorInfo):
        verb = "–ø–æ–¥—Ä–æ—Å" if old.cap < new.cap else "—É–ø–∞–ª"
        call = "–ê–π-–¥–∞ –∑–∞—Å—Ç–µ–π–∫–∞–µ–º!\n" if new.cap > old.cap else ''
        return (
            f'<b>–ö–∞–ø {verb} —Å {pretty_money(old.cap)} –¥–æ {pretty_money(new.cap)}!</b>\n'
            f'–°–µ–π—á–∞—Å –≤ –ø—É–ª—ã –ø–æ–º–µ—â–µ–Ω–æ <b>{pretty_money(new.stacked)}</b> {self.R}.\n'
            f"{self._cap_pb(new)}"
            f'–¶–µ–Ω–∞ {self.R} –≤ –ø—É–ª–µ <code>{new.price:.3f} BUSD</code>.\n'
            f'{call}'
            f'https://chaosnet.bepswap.com/'
        )

    # ------ PRICE -------
    def price_message(self, info: ThorInfo, fair_price: RuneFairPrice):
        return (
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ {self.R}: <code>{info.price:.3f} BUSD</code>.\n"
            f"–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ {self.R} —Å–µ–π—á–∞—Å: <code>${fair_price.fair_price:.3f}</code>."
        )

    # ------ TXS -------
    def tx_text(self, tx: StakeTx, dollar_per_rune: float, pool: StakePoolStats, pool_info: PoolInfo):
        msg = ''
        if tx.type == 'stake':
            msg += f'üê≥ <b>–ö–∏—Ç –¥–æ–±–∞–≤–∏–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏</b> üü¢\n'
        elif tx.type == 'unstake':
            msg += f'üê≥ <b>–ö–∏—Ç –≤—ã–≤–µ–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å</b> üî¥\n'

        rp, ap = tx.symmetry_rune_vs_asset()
        total_usd_volume = tx.full_rune * dollar_per_rune if dollar_per_rune != 0 else 0.0
        pool_depth_usd = pool_info.usd_depth(dollar_per_rune)
        info = link(f'https://viewblock.io/thorchain/address/{tx.address}', short_address(tx.address))

        return (
            f"<b>{pretty_money(tx.rune_amount)} {self.R}</b> ({rp:.0f}%) ‚ÜîÔ∏è "
            f"<b>{pretty_money(tx.asset_amount)} {short_asset_name(tx.pool)}</b> ({ap:.0f}%)\n"
            f"–í—Å–µ–≥–æ: <code>${pretty_money(total_usd_volume)}</code>\n"
            f"–ì–ª—É–±–∏–Ω–∞ –ø—É–ª–∞ —Å–µ–π—á–∞—Å: <b>${pretty_money(pool_depth_usd)}</b>.\n"
            f"–°–º–æ—Ç—Ä–µ—Ç—å: {info}"
        )

    # ------- QUEUE -------

    def queue_update(self, item_type, step, value):
        if step == 0:
            return f"‚ò∫Ô∏è –û—á–µ—Ä–µ–¥—å {item_type} —Å–Ω–æ–≤–∞ –æ–ø—É—Å—Ç–µ–ª–∞!"
        else:
            return f"ü§¨ <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –û—á–µ—Ä–µ–¥—å {code(item_type)} –∏–º–µ–µ—Ç {value} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!"

    # ------- PRICE -------

    def price_change(self, p: PriceReport, ath=False):
        title = bold('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã') if not ath else bold('üöÄ –î–æ—Å—Ç–∏–≥–Ω—É—Ç—å –Ω–æ–≤—ã–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º–∞–∫—Å–∏–º—É–º!')

        c_gecko_url = 'https://www.coingecko.com/ru/%D0%9A%D1%80%D0%B8%D0%BF%D1%82%D0%BE%D0%B2%D0%B0%D0%BB%D1%8E%D1%82%D1%8B/thorchain'
        c_gecko_link = link(c_gecko_url, 'RUNE')

        message = f"{title} | {c_gecko_link}\n"
        price = p.fair_price.real_rune_price

        pr_text = pretty_dollar(price)
        message += f"–¶–µ–Ω–∞ RUNE —Å–µ–π—á–∞—Å {code(pr_text)}\n"

        time_combos = zip(
            ('1—á.', '24—á.', '7–¥–Ω.'),
            (p.price_1h, p.price_24h, p.price_7d)
        )
        for title, old_price in time_combos:
            if old_price:
                pc = calc_percent_change(old_price, price)
                message += pre(f"{title.rjust(5)}:{adaptive_round_to_str(pc, True).rjust(8)} % "
                               f"{emoji_for_percent_change(pc).ljust(4).rjust(6)}") + "\n"

        fp = p.fair_price
        if fp.rank >= 1:
            message += f"–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {bold(pretty_dollar(fp.market_cap))} (#{bold(fp.rank)} –º–µ—Å—Ç–æ)\n"

        if fp.tlv_usd >= 1:
            message += (f"TLV (–∫—Ä–æ–º–µ RUNE): ${pre(pretty_money(fp.tlv_usd))}\n"
                        f"–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ —Ä—É–Ω—ã: ${code(pretty_money(fp.fair_price))}\n"
                        f"–°–ø–µ–∫—É–ª—è—Ç–∏–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: {pre(x_ses(fp.fair_price, price))}\n")

        return message.rstrip()
