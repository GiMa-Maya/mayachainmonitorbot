
type LiquidityProvider struct {
	Asset              common.Asset                                 `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset"`
	RuneAddress        gitlab_com_thorchain_thornode_common.Address `protobuf:"bytes,2,opt,name=rune_address,json=runeAddress,proto3,casttype=gitlab.com/thorchain/thornode/common.Address" json:"rune_address,omitempty"`
	AssetAddress       gitlab_com_thorchain_thornode_common.Address `protobuf:"bytes,3,opt,name=asset_address,json=assetAddress,proto3,casttype=gitlab.com/thorchain/thornode/common.Address" json:"asset_address,omitempty"`
	LastAddHeight      int64                                        `protobuf:"varint,4,opt,name=last_add_height,json=lastAddHeight,proto3" json:"last_add_height,omitempty"`
	LastWithdrawHeight int64                                        `protobuf:"varint,5,opt,name=last_withdraw_height,json=lastWithdrawHeight,proto3" json:"last_withdraw_height,omitempty"`
	Units              github_com_cosmos_cosmos_sdk_types.Uint      `protobuf:"bytes,6,opt,name=units,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"units"`
	PendingRune        github_com_cosmos_cosmos_sdk_types.Uint      `protobuf:"bytes,7,opt,name=pending_rune,json=pendingRune,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"pending_rune"`
	PendingAsset       github_com_cosmos_cosmos_sdk_types.Uint      `protobuf:"bytes,8,opt,name=pending_asset,json=pendingAsset,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"pending_asset"`
	PendingTxID        gitlab_com_thorchain_thornode_common.TxID    `protobuf:"bytes,9,opt,name=pending_tx_Id,json=pendingTxId,proto3,casttype=gitlab.com/thorchain/thornode/common.TxID" json:"pending_tx_Id,omitempty"`
	RuneDepositValue   github_com_cosmos_cosmos_sdk_types.Uint      `protobuf:"bytes,10,opt,name=rune_deposit_value,json=runeDepositValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"rune_deposit_value"`
	AssetDepositValue  github_com_cosmos_cosmos_sdk_types.Uint      `protobuf:"bytes,11,opt,name=asset_deposit_value,json=assetDepositValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"asset_deposit_value"`
}


// calculate percentage (in basis points) of the amount of impermanent loss protection
func calcImpLossProtectionAmtV1(ctx cosmos.Context, lastDepositHeight, target int64) int64 {
	age := common.BlockHeight(ctx) - lastDepositHeight
	if age < 17280 { // set minimum age to 1 day (17280 blocks)
		return 0
	}
	if age >= target {
		return 10000
	}
	return (age * 10000) / target
}


/// -------------------------------------


// calculate if there needs to add some imp loss protection, in rune
// protectionBasisPoints = 0..10000
func calcImpLossV47(lp LiquidityProvider, withdrawBasisPoints cosmos.Uint, protectionBasisPoints int64, pool Pool) cosmos.Uint {
	/*
		A0 = assetDepositValue; R0 = runeDepositValue;

		liquidityUnits = units the member wishes to redeem after applying withdrawBasisPoints
		A1 = GetShare(liquidityUnits, poolUnits, assetDepth);
		R1 = GetShare(liquidityUnits, poolUnits, runeDepth);
		P1 = R1/A1
		coverage = (R0 - R1) + (A0 - A1) * P1
	*/
	A0 := lp.AssetDepositValue
	R0 := lp.RuneDepositValue
	A1 := common.GetShare(lp.Units, pool.PoolUnits, pool.BalanceAsset)
	R1 := common.GetShare(lp.Units, pool.PoolUnits, pool.BalanceRune)
	P1 := R1.Quo(A1)
	coverage := common.SafeSub(A0, A1).Mul(P1).Add(common.SafeSub(R0, R1))

	// taking withdrawBasisPoints, calculate how much of the coverage the user should receives
	coverage = common.GetShare(withdrawBasisPoints, cosmos.NewUint(10000), coverage)

	// taking protection basis points, calculate how much of the coverage the user actually receives
	result := coverage.MulUint64(uint64(protectionBasisPoints)).QuoUint64(10000)
	return result
}

// ---------


protectionRuneAmount := cosmos.ZeroUint()
	fullProtectionLine, err := keeper.GetMimir(ctx, constants.FullImpLossProtectionBlocks.String())
	if fullProtectionLine < 0 || err != nil {
		fullProtectionLine = cv.GetInt64Value(constants.FullImpLossProtectionBlocks)
	}
	// only when Pool is in Available status will apply impermanent loss protection
	if fullProtectionLine > 0 && pool.Status == PoolAvailable { // if protection line is zero, no imp loss protection is given
		protectionBasisPoints := calcImpLossProtectionAmtV1(ctx, lp.LastAddHeight, fullProtectionLine)
		protectionRuneAmount = calcImpLossV47(lp, msg.BasisPoints, protectionBasisPoints, pool)
		if !protectionRuneAmount.IsZero() {
			newPoolUnits, extraUnits, err := calculatePoolUnitsV1(poolUnits, poolRune, poolAsset, protectionRuneAmount, cosmos.ZeroUint())
			if err != nil {
				return cosmos.ZeroUint(), cosmos.ZeroUint(), cosmos.ZeroUint(), cosmos.ZeroUint(), cosmos.ZeroUint(), err
			}
			ctx.Logger().Info("liquidity provider granted imp loss protection", "extra provider units", extraUnits, "extra rune", protectionRuneAmount)
			poolRune = poolRune.Add(protectionRuneAmount)
			fLiquidityProviderUnit = fLiquidityProviderUnit.Add(extraUnits)
			poolUnits = newPoolUnits
		}
	}

	----


	        """
        See 1. https://gitlab.com/thorchain/thornode/-/blob/develop/x/thorchain/withdraw_v55.go#L73

        2. https://gitlab.com/thorchain/thornode/-/blob/develop/x/thorchain/withdraw_v1.go#L226

        func calcImpLossProtectionAmtV1(ctx cosmos.Context, lastDepositHeight, target int64) int64 {
            age := common.BlockHeight(ctx) - lastDepositHeight
            if age < 17280 { // set minimum age to 1 day (17280 blocks)
                return 0
            }
            if age >= target {
                return 10000
            }
            return (age * 10000) / target
        }

        3. https://gitlab.com/thorchain/thornode/-/blob/develop/x/thorchain/withdraw_v47.go#L176

        // calculate if there needs to add some imp loss protection, in rune
        func calcImpLossV47(lp LiquidityProvider, withdrawBasisPoints cosmos.Uint, protectionBasisPoints int64, pool Pool) cosmos.Uint {
            /*
                A0 = assetDepositValue; R0 = runeDepositValue;

                liquidityUnits = units the member wishes to redeem after applying withdrawBasisPoints
                A1 = GetShare(liquidityUnits, lpUnits, assetDepth);
                R1 = GetShare(liquidityUnits, lpUnits, runeDepth);
                P1 = R1/A1
                coverage = (R0 - R1) + (A0 - A1) * P1
            */
            A0 := lp.AssetDepositValue
            R0 := lp.RuneDepositValue
            A1 := common.GetShare(lp.Units, pool.LPUnits, pool.BalanceAsset)
            R1 := common.GetShare(lp.Units, pool.LPUnits, pool.BalanceRune)
            P1 := R1.Quo(A1)
            coverage := common.SafeSub(A0, A1).Mul(P1).Add(common.SafeSub(R0, R1))

            // taking withdrawBasisPoints, calculate how much of the coverage the user should receives
            coverage = common.GetShare(withdrawBasisPoints, cosmos.NewUint(10000), coverage)

            // taking protection basis points, calculate how much of the coverage the user actually receives
            result := coverage.MulUint64(uint64(protectionBasisPoints)).QuoUint64(10000)
            return result
        }


        """
