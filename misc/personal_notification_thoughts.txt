# Nodes!

NodeFetcher -> a PersonalNotifier subscribes the Fetcher

On data

Determine which nodes have changed

E.G.

slash_changes = {
  node.address: (node.slash_points - old_nodes[node.address]) for
  node in newly_came_nodes
}

We will have a map like this {
node_all_changes =  Node.address => Changes(
    slash_points = Pair(old=1000, new=1012)
    software_version = Pair(old='0.63.1', new='0.64.0'),
    ... and so on
    @property
    def any_changed(self):
      return any(prop.changed for prop in self.props)
  )
}

nodes_updated = filter(node_all_changes, if node_all_changes.any_changed)

Then we need extract the list of listeners for the changed nodes.

listeners = {
  node.address: redis.get_listeners(node.address) for node in nodes_updated
}

Filter orphaned nodes

listeners = filter(listeners, len(listener.users) > 0)

-----

What to notify?

- New version detected! v.123. Consider upgrading!
  if new version, any of my nodes has version < 0
- Hurry up! 50% of nodes have already upgraded to version v.123. Your node ADDR runs v.112
- Your node has been upgraded (v.1 => v.2)!
- +10 slash_points last 5 min (+132 last 24h)
- Your node stopped responding. We tried to connect to it at 11:03, 12:04 and 13:05
- Your node is back online
- Your node block height has stuck on chain: THOR, BTC
- Your node block height is increasing again
- Node churned in/out
- Your node is about to churn out
- Churn is soon. Your node at #5 place.
-



# Menu

Manage my nodes
  - List
  - Add one
  - Add all
    - All all?
    - All active?
  - Remove all

Settings
  - ... old Language
  - Node monitoring
    - Slash pts threshold to trigger alert ON=N/OFF
    - Churn ON/OFF
    - Version ON/OFF
    - Height ON/OFF
    - Accessability ON/OFF
  - Price
    - Notify me if price jumps N % (up/down)
    - Set alert (when rune price == N $)
    - ???
