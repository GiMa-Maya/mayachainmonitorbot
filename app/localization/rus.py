from datetime import datetime
from math import ceil
from typing import List

from aiothornode.types import ThorChainInfo

from localization.base import BaseLocalization, RAIDO_GLYPH, CREATOR_TG, URL_LEADERBOARD_MCCN
from services.lib.constants import Chains
from services.lib.date_utils import format_time_ago, seconds_human, now_ts
from services.lib.explorers import get_explorer_url_to_address
from services.lib.money import pretty_dollar, pretty_money, short_address, adaptive_round_to_str, calc_percent_change, \
    emoji_for_percent_change, short_asset_name, chain_name_from_pool, short_money
from services.lib.texts import bold, link, code, ital, pre, x_ses, progressbar, bracketify, \
    up_down_arrow
from services.models.cap_info import ThorCapInfo
from services.models.net_stats import NetworkStats
from services.models.node_info import NodeInfoChanges, NodeInfo
from services.models.pool_info import PoolInfo, PoolChanges
from services.models.pool_stats import LiquidityPoolStats
from services.models.price import RuneFairPrice, PriceReport
from services.models.queue import QueueInfo
from services.models.tx import LPAddWithdrawTx, ThorTxType


class RussianLocalization(BaseLocalization):
    LOADING = '‚åõ –ó–∞–≥—Ä—É–∑–∫–∞...'

    # ---- WELCOME ----
    def help_message(self):
        return (
            f"–≠—Ç–æ—Ç –±–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –∫—Ä—É–ø–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö —Å —Å–µ—Ç–∏ {link(self.THORCHAIN_LINK, 'THORChain')}.\n"
            f"–ö–æ–º–∞–Ω–¥—ã:\n"
            f"/help ‚Äì —ç—Ç–∞ –ø–æ–º–æ—â—å\n"
            f"/start ‚Äì –∑–∞–ø—É—Å–∫ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            f"/lang ‚Äì –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\n"
            f"/cap ‚Äì —Ç–µ–∫—É—â–∏–π –∫–∞–ø –¥–ª—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –≤ –ø—É–ª–∞—Ö Chaosnet\n"
            f"/price ‚Äì —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {self.R}.\n"
            f"<b>‚ö†Ô∏è –ë–æ—Ç —Ç–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ {self.alert_channel_name}!</b>\n"
            f"ü§ó –û—Ç–∑—ã–≤—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {CREATOR_TG}."
        )

    def welcome_message(self, info: ThorCapInfo):
        return (
            f"–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ THORChain –∏ —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –≤ –ø—É–ª—ã.\n"
            f"–¶–µ–Ω–∞ {self.R} —Å–µ–π—á–∞—Å <code>{info.price:.3f} $</code>.\n"
            f"<b>‚ö†Ô∏è –ë–æ—Ç —Ç–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ {self.alert_channel_name}!</b>\n"
            f"–ù–∞–±–µ—Ä–∏ /help, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
            f"ü§ó –û—Ç–∑—ã–≤—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {CREATOR_TG}."
        )

    def unknown_command(self):
        return (
            "üôÑ –ò–∑–≤–∏–Ω–∏, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ù–∞–∂–º–∏ –Ω–∞ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
        )

    # ----- MAIN MENU ------

    BUTTON_MM_MY_ADDRESS = 'üè¶ –ú–æ–∏ –∞–¥—Ä–µ—Å–∞'
    BUTTON_MM_METRICS = 'üìê –ú–µ—Ç—Ä–∏–∫–∏'
    BUTTON_MM_SETTINGS = f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'
    BUTTON_MM_MAKE_AVATAR = f'ü¶π‚ÄçÔ∏èÔ∏è –°–¥–µ–ª–∞–π –∞–≤—É'
    BUTTON_MM_NODE_OP = 'üîú –û–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –Ω–æ–¥'

    # ------ LP INFO -----

    BUTTON_SM_ADD_ADDRESS = '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å'
    BUTTON_BACK = 'üîô –ù–∞–∑–∞–¥'
    BUTTON_SM_BACK_TO_LIST = 'üîô –ù–∞–∑–∞–¥ –∫ –∞–¥—Ä–µ—Å–∞–º'
    BUTTON_SM_BACK_MM = 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'

    BUTTON_SM_SUMMARY = 'üí≤ –°–≤–æ–¥–∫–∞'

    BUTTON_VIEW_RUNESTAKEINFO = 'üåé –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ runeyield.info'
    BUTTON_VIEW_VALUE_ON = '–°–∫—Ä—ã—Ç—å –¥–µ–Ω—å–≥–∏: –ù–ï–¢'
    BUTTON_VIEW_VALUE_OFF = '–°–∫—Ä—ã—Ç—å –¥–µ–Ω—å–≥–∏: –î–ê'
    BUTTON_REMOVE_THIS_ADDRESS = '‚ùå –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å—Å'

    TEXT_NO_ADDRESSES = "üîÜ –í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤. –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∞–¥—Ä–µ—Å, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å."
    TEXT_YOUR_ADDRESSES = 'üîÜ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∞–¥—Ä–µ—Å–∞:'
    TEXT_INVALID_ADDRESS = code('‚õîÔ∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∞–¥—Ä–µ—Å–∞!')
    TEXT_SELECT_ADDRESS_ABOVE = '–í—ã–±–µ—Ä–∏ –∞–¥—Ä–µ—Å –≤—ã—à–µ ‚òùÔ∏è '
    TEXT_SELECT_ADDRESS_SEND_ME = '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å, –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ –º–Ω–µ üëá'
    TEXT_LP_NO_POOLS_FOR_THIS_ADDRESS = 'üì™ <b>–ù–∞ —ç—Ç–æ–º –∞–¥—Ä–µ—Å–µ –Ω–µ—Ç –ø—É–ª–æ–≤ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏.</b> ' \
                                        '–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π.'

    def text_lp_img_caption(self):
        bot_link = "@" + self.this_bot_name
        start_me = self.url_start_me
        return f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {link(start_me, bot_link)}'

    LP_PIC_POOL = '–ü–£–õ'
    LP_PIC_RUNE = 'RUNE'
    LP_PIC_ADDED = '–î–æ–±–∞–≤–ª–µ–Ω–æ'
    LP_PIC_WITHDRAWN = '–í—ã–≤–µ–¥–µ–Ω–æ'
    LP_PIC_REDEEM = '–ú–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å'
    LP_PIC_GAIN_LOSS = '–î–æ—Ö–æ–¥ / —É–±—ã—Ç–æ–∫'
    LP_PIC_IN_USD = '–≤ USD'
    LP_PIC_R_RUNE = f'{RAIDO_GLYPH}une'
    LP_PIC_ADDED_VALUE = '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Å–µ–≥–æ'
    LP_PIC_WITHDRAWN_VALUE = '–í—ã–≤–µ–¥–µ–Ω–æ –≤—Å–µ–≥–æ'
    LP_PIC_CURRENT_VALUE = '–û—Å—Ç–∞–ª–æ—Å—å –≤ –ø—É–ª–µ'
    LP_PIC_PRICE_CHANGE = '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã'
    LP_PIC_PRICE_CHANGE_2 = '—Å 1–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'
    LP_PIC_LP_VS_HOLD = '–ü—Ä–æ—Ç–∏–≤ –•–û–õ–î'
    LP_PIC_LP_APY = '–ì–æ–¥–æ–≤—ã—Ö'
    LP_PIC_EARLY = '–ï—â–µ —Ä–∞–Ω–æ...'
    LP_PIC_FOOTER = ""  # my LP scanner is used
    LP_PIC_FEES = '–í–∞—à–∏ —á–∞–µ–≤—ã–µ'

    LP_PIC_SUMMARY_HEADER = '–°–≤–æ–¥–∫–∞ –ø–æ –ø—É–ª–∞–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏'
    LP_PIC_SUMMARY_ADDED_VALUE = '–î–æ–±–∞–≤–ª–µ–Ω–æ'
    LP_PIC_SUMMARY_WITHDRAWN_VALUE = '–í—ã–≤–µ–¥–µ–Ω–æ'
    LP_PIC_SUMMARY_CURRENT_VALUE = '–°–µ–π—á–∞—Å –≤ –ø—É–ª–µ'
    LP_PIC_SUMMARY_TOTAL_GAIN_LOSS = '–î–æ—Ö–æ–¥/—É–±—ã—Ç–æ–∫'
    LP_PIC_SUMMARY_TOTAL_GAIN_LOSS_PERCENT = '–î–æ—Ö–æ–¥/—É–±—ã—Ç–æ–∫ %'
    LP_PIC_SUMMARY_AS_IF_IN_RUNE = f'–ï—Å–ª–∏ –≤—Å–µ –≤ {RAIDO_GLYPH}'
    LP_PIC_SUMMARY_AS_IF_IN_USD = '–ï—Å–ª–∏ –≤—Å–µ –≤ $'
    LP_PIC_SUMMARY_TOTAL_LP_VS_HOLD = '–ò—Ç–æ–≥–æ —Ö–æ–ª–¥ –ø—Ä–æ—Ç–∏–≤ –ø—É–ª–æ–≤, $'
    LP_PIC_SUMMARY_NO_WEEKLY_CHART = "–ù–µ—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞, –∏–∑–≤–∏–Ω–∏—Ç–µ..."

    def pic_stake_days(self, total_days, first_stake_ts):
        start_date = datetime.fromtimestamp(first_stake_ts).strftime('%d.%m.%Y')
        return f'{ceil(total_days)} –¥–Ω. ({start_date})'

    def text_stake_loading_pools(self, address):
        return f'‚è≥ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.</b>\n' \
               f'–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –ø—É–ª–æ–≤ –¥–ª—è –∞–¥—Ä–µ—Å–∞ {pre(address)}...\n' \
               f'–ò–Ω–æ–≥–¥–∞ –æ–Ω–∞ –º–æ–∂–µ—Ç –∏–¥—Ç–∏ –¥–æ–ª–≥–æ, –µ—Å–ª–∏ Midgard —Å–∏–ª—å–Ω–æ –Ω–∞–≥—Ä—É–∂–µ–Ω.'

    def text_stake_provides_liq_to_pools(self, address, pools):
        pools = pre(', '.join(pools))
        explorer_links = self.explorer_links_to_thor_address(address)
        return f'üõ≥Ô∏è {pre(address)}\n' \
               f'–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–ª—ã:\n{pools}.\n\n' \
               f"üîç –û–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—å: {explorer_links}.\n\n" \
               f'üëá –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏.'

    def text_stake_today(self):
        today = datetime.now().strftime('%d.%m.%Y')
        return f'–°–µ–≥–æ–¥–Ω—è: {today}'

    # ----- CAP ------

    def notification_text_cap_change(self, old: ThorCapInfo, new: ThorCapInfo):
        up = old.cap < new.cap
        verb = "–ø–æ–¥—Ä–æ—Å" if up else "—É–ø–∞–ª"
        arrow = '‚¨ÜÔ∏è' if up else '‚ö†Ô∏è ‚¨áÔ∏è'
        call = "–ê–π-–¥–∞ –∑–∞–ø—É–ª–∏–º –µ—â–µ!\n" if up else ''
        return (
            f'{arrow} <b>–ö–∞–ø {verb} —Å {pretty_money(old.cap)} –¥–æ {pretty_money(new.cap)}!</b>\n'
            f'–°–µ–π—á–∞—Å –≤ –ø—É–ª—ã –ø–æ–º–µ—â–µ–Ω–æ <b>{pretty_money(new.pooled_rune)}</b> {self.R}.\n'
            f"{self._cap_progress_bar(new)}\n"
            f'–¶–µ–Ω–∞ {self.R} –≤ –ø—É–ª–µ <code>{new.price:.3f} $</code>.\n'
            f'{call}'
            f'{self.thor_site()}'
        )

    # ------ PRICE -------

    PRICE_GRAPH_TITLE = f'–¶–µ–Ω–∞ {RAIDO_GLYPH}—É–Ω—ã'
    PRICE_GRAPH_LEGEND_DET_PRICE = '–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç—Å–∫–∞—è —Ü–µ–Ω–∞'
    PRICE_GRAPH_LEGEND_ACTUAL_PRICE = '–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞'

    def price_message(self, info: ThorCapInfo, fair_price: RuneFairPrice):
        return (
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ {self.R}: <code>{info.price:.3f} $</code>.\n"
            f"–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ {self.R} —Å–µ–π—á–∞—Å: <code>${fair_price.fair_price:.3f}</code>."
        )

    # ------ TXS -------
    def notification_text_large_tx(self, tx: LPAddWithdrawTx,
                                   usd_per_rune: float,
                                   pool_info: PoolInfo,
                                   cap: ThorCapInfo = None):
        (ap, asset_side_usd_short, asset_url, chain, percent_of_pool, pool_depth_usd, rp, rune_side_usd_short, thor_url,
         total_usd_volume, user_url) = self.lp_tx_calculations(usd_per_rune, pool_info, tx)

        heading = ''
        if tx.type == ThorTxType.TYPE_ADD_LIQUIDITY:
            heading = f'üê≥ <b>–ö–∏—Ç –¥–æ–±–∞–≤–∏–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏</b> üü¢'
        elif tx.type == ThorTxType.TYPE_WITHDRAW:
            heading = f'üê≥ <b>–ö–∏—Ç –≤—ã–≤–µ–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å</b> üî¥'

        msg = (
            f"{heading}\n"
            f"<b>{pretty_money(tx.rune_amount)} {self.R}</b> ({rp:.0f}%) ‚ÜîÔ∏è "
            f"<b>{pretty_money(tx.asset_amount)} {short_asset_name(tx.pool)}</b> ({ap:.0f}%)\n"
            f"–í—Å–µ–≥–æ: <code>${pretty_money(total_usd_volume)}</code> ({percent_of_pool:.2f}% –æ—Ç –≤—Å–µ–≥–æ –ø—É–ª–∞).\n"
            f"–ì–ª—É–±–∏–Ω–∞ –ø—É–ª–∞ —Å–µ–π—á–∞—Å: <b>${pretty_money(pool_depth_usd)}</b>.\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_url}.\n"
            f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {self.R} - {thor_url} / {chain} - {asset_url}."
        )

        if cap:
            msg += '\n'
            msg += (
                f"–ö–∞–ø –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ {self._cap_progress_bar(cap)}.\n"
                f'–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ {code(pretty_money(cap.how_much_rune_you_can_lp))} {bold(self.R)} '
                f'({pretty_dollar(cap.how_much_usd_you_can_lp)}).'
            )

        return msg

    def notification_text_cap_full(self, cap: ThorCapInfo):
        return (
            'üôÜ‚Äç‚ôÄÔ∏è <b>–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–µ–ª–∞!</b>\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –Ω–∏—á–µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—É–ª—ã. '
            '–í—ã –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–≤—Ä–∞—Ç –≤–∞—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤!\n'
            f'<b>{pretty_money(cap.pooled_rune)} {self.R}</b> –∏–∑ '
            f"<b>{pretty_money(cap.cap)} {self.R}</b> —Å–µ–π—á–∞—Å –≤ –ø—É–ª–∞—Ö.\n"
            f"{self._cap_progress_bar(cap)}\n"
        )

    # ------- QUEUE -------

    def notification_text_queue_update(self, item_type, step, value):
        if step == 0:
            return f"‚ò∫Ô∏è –û—á–µ—Ä–µ–¥—å {item_type} —Å–Ω–æ–≤–∞ –æ–ø—É—Å—Ç–µ–ª–∞!"
        else:
            return f"ü§¨ <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –û—á–µ—Ä–µ–¥—å {code(item_type)} –∏–º–µ–µ—Ç {value} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!"

    # ------- PRICE -------

    def notification_text_price_update(self, p: PriceReport, ath=False):
        title = bold('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã') if not ath else bold('üöÄ –î–æ—Å—Ç–∏–≥–Ω—É—Ç—å –Ω–æ–≤—ã–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º–∞–∫—Å–∏–º—É–º!')

        c_gecko_url = 'https://www.coingecko.com/ru/' \
                      '%D0%9A%D1%80%D0%B8%D0%BF%D1%82%D0%BE%D0%B2%D0%B0%D0%BB%D1%8E%D1%82%D1%8B/thorchain'
        c_gecko_link = link(c_gecko_url, 'RUNE')

        message = f"{title} | {c_gecko_link}\n\n"
        price = p.fair_price.real_rune_price

        btc_price = f"‚Çø {p.btc_real_rune_price:.8f}"
        pr_text = f"${price:.2f}"
        message += f"–¶–µ–Ω–∞ <b>RUNE</b> —Å–µ–π—á–∞—Å {code(pr_text)} ({btc_price}).\n"

        last_ath = p.last_ath
        if last_ath is not None and ath:
            if isinstance(last_ath.ath_date, float):
                last_ath_pr = f'{last_ath.ath_price:.2f}'
            else:
                last_ath_pr = str(last_ath.ath_price)
            message += f"–ü–æ—Å–ª–µ–¥–Ω–∏–π ATH –±—ã–ª ${pre(last_ath_pr)} ({format_time_ago(last_ath.ath_date)}).\n"

        time_combos = zip(
            ('1—á.', '24—á.', '7–¥–Ω.'),
            (p.price_1h, p.price_24h, p.price_7d)
        )
        for title, old_price in time_combos:
            if old_price:
                pc = calc_percent_change(old_price, price)
                message += pre(f"{title.rjust(5)}:{adaptive_round_to_str(pc, True).rjust(8)} % "
                               f"{emoji_for_percent_change(pc).ljust(4).rjust(6)}") + "\n"

        fp = p.fair_price
        if fp.rank >= 1:
            message += f"–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {bold(pretty_dollar(fp.market_cap))} (#{bold(fp.rank)} –º–µ—Å—Ç–æ)\n"

        if fp.tlv_usd >= 1:
            message += (f"TLV (–∫—Ä–æ–º–µ RUNE): ${pre(pretty_money(fp.tlv_usd))}\n"
                        f"–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞: {code(pretty_money(fp.fair_price, prefix='$'))}\n"
                        f"–°–ø–µ–∫—É–ª—è—Ç–∏–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: {pre(x_ses(fp.fair_price, price))}\n")

        return message.rstrip()

    # ------- POOL CHURN -------

    def notification_text_pool_churn(self, pc: PoolChanges):
        if pc.pools_changed:
            message = bold('üèä –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—É–ª–∞—Ö –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:') + '\n\n'
        else:
            message = ''

        ru_stat = {
            PoolInfo.DEPRECATED_ENABLED: '–≤–∫–ª—é—á–µ–Ω',
            PoolInfo.AVAILABLE: '–≤–∫–ª—é—á–µ–Ω',

            PoolInfo.DEPRECATED_BOOTSTRAP: '–æ–∂–∏–¥–∞–µ—Ç',
            PoolInfo.STAGED: '–æ–∂–∏–¥–∞–µ—Ç'
        }

        def pool_text(pool_name, status, to_status=None):
            if PoolInfo.is_status_enabled(to_status):
                extra = 'üéâ –ü–£–õ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù. –ú–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –æ–±–º–µ–Ω—ã!'
            else:
                extra = ital(ru_stat[status])
                if to_status is not None:
                    extra += f' ‚Üí {ital(ru_stat[to_status])}'
                extra = f'({extra})'
            return f'  ‚Ä¢ {self.pool_link(pool_name)}: {extra}'

        if pc.pools_added:
            message += '‚úÖ –ü—É–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n' + '\n'.join([pool_text(*a) for a in pc.pools_added]) + '\n'
        if pc.pools_removed:
            message += '‚ùå –ü—É–ª—ã —É–¥–∞–ª–µ–Ω—ã:\n' + '\n'.join([pool_text(*a) for a in pc.pools_removed]) + '\n'
        if pc.pools_changed:
            message += 'üîÑ –ü—É–ª—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å:\n' + '\n'.join([pool_text(*a) for a in pc.pools_changed]) + '\n'

        return message.rstrip()

    # -------- SETTINGS --------

    BUTTON_SET_LANGUAGE = 'üåê –Ø–∑—ã–∫'
    TEXT_SETTING_INTRO = '<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö?'

    # -------- METRICS ----------

    BUTTON_METR_CAP = '‚úã –ö–∞–ø –ª–∏–≤–∫–∏–¥–Ω–æ—Å—Ç–∏'
    BUTTON_METR_PRICE = f'üí≤ {BaseLocalization.R} –∏–Ω—Ñ–æ –æ —Ü–µ–Ω–µ'
    BUTTON_METR_QUEUE = f'üë• –û—á–µ—Ä–µ–¥—å'
    BUTTON_METR_STATS = f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
    BUTTON_METR_NODES = 'üñ• –ù–æ–¥—ã (—É–∑–ª—ã)'
    BUTTON_METR_LEADERBOARD = 'üèÜ –î–æ—Å–∫–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤'

    TEXT_METRICS_INTRO = '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?'

    def cap_message(self, info: ThorCapInfo):
        if info.can_add_liquidity:
            rune_vacant = info.how_much_rune_you_can_lp
            usd_vacant = rune_vacant * info.price
            more_info = f'ü§≤üèª –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ {bold(pretty_money(rune_vacant) + " " + RAIDO_GLYPH)} {self.R} ' \
                        f'–∏–ª–∏ {bold(pretty_dollar(usd_vacant))}.\nüëâüèª {self.thor_site()}'
        else:
            more_info = 'üõë –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å —Å–µ–π—á–∞—Å. –î–æ–∂–¥–∏—Ç–µ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–Ω—è—Ç–∏–∏ –∫–∞–ø—ã!'

        return (
            f"<b>{pretty_money(info.pooled_rune)} {RAIDO_GLYPH} {self.R}</b> –º–æ–Ω–µ—Ç –∏–∑ "
            f"<b>{pretty_money(info.cap)} {RAIDO_GLYPH} {self.R}</b> —Å–µ–π—á–∞—Å –≤ –ø—É–ª–∞—Ö.\n"
            f"{self._cap_progress_bar(info)}\n"
            f"{more_info}\n"
            f"–¶–µ–Ω–∞ {bold(self.R)} —Å–µ–π—á–∞—Å <code>{info.price:.3f} $</code>.\n"
        )

    def text_leaderboard_info(self):
        return f"üèÜ –î–æ—Å–∫–∞ –ª—É—à—á–∏—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ THORChain:\n" \
               f"\n" \
               f" üëâ {bold(URL_LEADERBOARD_MCCN)} üëà\n"

    def queue_message(self, queue_info: QueueInfo):
        return (
                   f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—á–µ—Ä–µ–¥—è—Ö:</b>\n"
                   f"–ò—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (outbound): {code(queue_info.outbound)} —à—Ç.\n"
                   f"–û—á–µ—Ä–µ–¥—å –æ–±–º–µ–Ω–æ–≤ (swap): {code(queue_info.swap)} —à—Ç.\n"
                   f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—á–µ—Ä–µ–¥—å (internal): {code(queue_info.internal)} —à—Ç.\n"
               ) + (
                   f"–ï—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –º–Ω–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –≤–∞—à–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç –∑–∞–Ω—è—Ç—å –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–±—ã—á–Ω–æ."
                   if queue_info.is_full else ''
               )

    TEXT_PRICE_INFO_ASK_DURATION = '–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫?'

    BUTTON_1_HOUR = '1 —á–∞—Å–æ–≤'
    BUTTON_24_HOURS = '24 —á–∞—Å–∞'
    BUTTON_1_WEEK = '1 –Ω–µ–¥–µ–ª—è'
    BUTTON_30_DAYS = '30 –¥–Ω–µ–π'

    # ------- AVATAR -------

    TEXT_AVA_WELCOME = 'üñºÔ∏è –°–∫–∏–Ω—å –º–Ω–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —Ñ–æ—Ç–æ, –∏ —è —Å–¥–µ–ª–∞—é –¥–ª—è —Ç–µ–±—è –∞–≤–∞—Ç–∞—Ä –≤ —Å—Ç–∏–ª–µ THORChain ' \
                       '—Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–π —Ä–∞–º–∫–æ–π. –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç, ' \
                       '—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º –ø–æ—Ç–µ—Ä–µ–π –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑-–∑–∞ —Å–∂–∞—Ç–∏—è.'

    TEXT_AVA_ERR_INVALID = '‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞!'
    TEXT_AVA_ERR_NO_PIC = '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–≤–æ–µ —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è!'
    TEXT_AVA_READY = 'ü•≥ <b>–¢–≤–æ–π THORChain –∞–≤–∞—Ç–∞—Ä –≥–æ—Ç–æ–≤!</b> ' \
                     '–°–∫–∞—á–∞–π —ç—Ç–æ —Ñ–æ—Ç–æ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö.'

    BUTTON_AVA_FROM_MY_USERPIC = 'üòÄ –ò–∑ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è'

    # ------- NETWORK SUMMARY -------

    def network_bond_security_text(self, network_security_ratio):
        if network_security_ratio > 0.9:
            return "ü•± –ù–ï–≠–§–§–ï–ö–¢–ò–í–ù–ê"
        elif 0.9 >= network_security_ratio > 0.75:
            return "ü•∏ –ü–ï–†–ï–û–ë–ï–°–ü–ï–ß–ï–ù–ê"
        elif 0.75 >= network_security_ratio >= 0.6:
            return "‚ö° –û–ü–¢–ò–ú–ê–õ–¨–ù–ê"
        elif 0.6 > network_security_ratio >= 0.5:
            return "ü§¢ –ù–ï–î–û–û–ë–ï–°–ü–ï–ß–ï–ù–ê"
        else:
            return "ü§¨ –ù–ï–ë–ï–ó–û–ü–ê–°–ù–ê"

    def notification_text_network_summary(self, old: NetworkStats, new: NetworkStats):
        message = bold('üåê THORChain —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') + '\n'

        message += '\n'

        security_pb = progressbar(new.network_security_ratio, 1.0, 10)
        security_text = self.network_bond_security_text(new.network_security_ratio)
        message += f'üï∏Ô∏è –°–µ–π—á–∞—Å —Å–µ—Ç—å {bold(security_text)} {security_pb}.\n'

        active_nodes_change = bracketify(up_down_arrow(old.active_nodes, new.active_nodes, int_delta=True))
        standby_nodes_change = bracketify(up_down_arrow(old.active_nodes, new.active_nodes, int_delta=True))
        message += f"üñ•Ô∏è {bold(new.active_nodes)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥{active_nodes_change} " \
                   f"–∏ {bold(new.standby_nodes)} –Ω–æ–¥ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è{standby_nodes_change}.\n"

        current_bond_text = bold(pretty_money(new.total_bond_rune, postfix=RAIDO_GLYPH))
        current_pooled_text = bold(pretty_money(new.total_rune_pooled, postfix=RAIDO_GLYPH))
        current_bond_change = bracketify(up_down_arrow(old.total_bond_rune, new.total_bond_rune, money_delta=True))
        current_pooled_change = bracketify(
            up_down_arrow(old.total_rune_pooled, new.total_rune_pooled, money_delta=True))

        current_bond_usd_text = bold(pretty_dollar(new.total_bond_usd))
        current_pooled_usd_text = bold(pretty_dollar(new.total_pooled_usd))
        current_bond_usd_change = bracketify(up_down_arrow(old.total_bond_usd, new.total_bond_usd, money_delta=True))
        current_pooled_usd_change = bracketify(
            up_down_arrow(old.total_pooled_usd, new.total_pooled_usd, money_delta=True))

        message += f"üîó –í—Å–µ–≥–æ –≤ –±–æ–Ω–¥–µ: {current_bond_text}{current_bond_change} –∏–ª–∏ " \
                   f"{current_bond_usd_text}{current_bond_usd_change}.\n"
        message += f"üèä –í—Å–µ–≥–æ –≤ –ø—É–ª–∞—Ö –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {current_pooled_text}{current_pooled_change} –∏–ª–∏ " \
                   f"{current_pooled_usd_text}{current_pooled_usd_change}.\n"

        reserve_change = bracketify(up_down_arrow(old.reserve_rune, new.reserve_rune,
                                                  postfix=RAIDO_GLYPH, money_delta=True))
        message += f'üí∞ –†–µ–∑–µ—Ä–≤—ã: {bold(pretty_money(new.reserve_rune, postfix=RAIDO_GLYPH))}{reserve_change}.\n'

        tlv_change = bracketify(up_down_arrow(old.tlv_usd, new.tlv_usd, money_delta=True, money_prefix='$'))
        message += f'üè¶ TLV (–≤—Å–µ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ): {code(pretty_dollar(new.tlv_usd))}{tlv_change}.\n'

        message += '\n'

        if old.is_ok:
            # 24 h Add/withdrawal
            added_24h_rune = new.added_rune - old.added_rune
            withdrawn_24h_rune = new.withdrawn_rune - old.withdrawn_rune
            swap_volume_24h_rune = new.swap_volume_rune - old.swap_volume_rune
            switched_24h_rune = new.switched_rune - old.switched_rune

            add_rune_text = bold(pretty_money(added_24h_rune, prefix=RAIDO_GLYPH))
            withdraw_rune_text = bold(pretty_money(withdrawn_24h_rune, prefix=RAIDO_GLYPH))
            swap_rune_text = bold(pretty_money(swap_volume_24h_rune, prefix=RAIDO_GLYPH))
            switch_rune_text = bold(pretty_money(switched_24h_rune, prefix=RAIDO_GLYPH))

            price = new.usd_per_rune

            add_usd_text = pretty_dollar(added_24h_rune * price)
            withdraw_usd_text = pretty_dollar(withdrawn_24h_rune * price)
            swap_usd_text = pretty_dollar(swap_volume_24h_rune * price)
            switch_usd_text = pretty_dollar(switched_24h_rune * price)

            message += f'{ital("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:")}\n'

            if added_24h_rune:
                message += f'‚ûï –†—É–Ω –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø—É–ª—ã: {add_rune_text} ({add_usd_text}).\n'
            if withdrawn_24h_rune:
                message += f'‚ûñ –†—É–Ω –≤—ã–≤–µ–¥–µ–Ω–æ –∏–∑ –ø—É–ª–æ–≤: {withdraw_rune_text} ({withdraw_usd_text}).\n'
            if swap_volume_24h_rune:
                message += f'üîÄ –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: {swap_rune_text} ({swap_usd_text}) ' \
                           f'–ø—Ä–∏ {bold(new.swaps_24h)} –æ–±–º–µ–Ω–æ–≤ —Å–æ–≤–µ—Ä—à–µ–Ω–æ.\n'
            if switched_24h_rune:
                message += f'üíé –†—É–Ω –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ –Ω–∞—Ç–∏–≤–Ω—ã–µ: {switch_rune_text} ({switch_usd_text}).\n'
            message += '\n'

        if abs(old.bonding_apy - new.bonding_apy) > 0.01:
            bonding_apy_change = bracketify(
                up_down_arrow(old.bonding_apy, new.bonding_apy, money_delta=True, postfix='%'))
        else:
            bonding_apy_change = ''

        if abs(old.liquidity_apy - new.liquidity_apy) > 0.01:
            liquidity_apy_change = bracketify(
                up_down_arrow(old.liquidity_apy, new.liquidity_apy, money_delta=True, postfix='%'))
        else:
            liquidity_apy_change = ''

        message += f'üìà –î–æ—Ö–æ–¥ –æ—Ç –±–æ–Ω–¥–æ–≤ –≤ –Ω–æ–¥–∞—Ö, –≥–æ–¥–æ–≤—ã—Ö: {code(pretty_money(new.bonding_apy, postfix="%"))}{bonding_apy_change} –∏ ' \
                   f'–¥–æ—Ö–æ–¥ –æ—Ç –ø—É–ª–æ–≤ –≤ —Å—Ä–µ–¥–Ω–µ–º, –≥–æ–¥–æ–≤—ã—Ö {code(pretty_money(new.liquidity_apy, postfix="%"))}{liquidity_apy_change}.\n'

        message += f'üõ°Ô∏è –í—ã–ø–ª–∞—á–µ–Ω–æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –æ—Ç IL (–Ω–µ–ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å): {code(pretty_dollar(new.loss_protection_paid_usd))}.\n'

        daily_users_change = bracketify(up_down_arrow(old.users_daily, new.users_daily, int_delta=True))
        monthly_users_change = bracketify(up_down_arrow(old.users_monthly, new.users_monthly, int_delta=True))
        message += f'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å: {code(new.users_daily)}{daily_users_change}, ' \
                   f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: {code(new.users_monthly)}{monthly_users_change}\n'

        message += '\n'

        active_pool_changes = bracketify(up_down_arrow(old.active_pool_count,
                                                       new.active_pool_count, int_delta=True))
        pending_pool_changes = bracketify(up_down_arrow(old.pending_pool_count,
                                                        new.pending_pool_count, int_delta=True))
        message += f'{bold(new.active_pool_count)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—É–ª–æ–≤{active_pool_changes} –∏ ' \
                   f'{bold(new.pending_pool_count)} –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—É–ª–æ–≤{pending_pool_changes}.\n'

        if new.next_pool_to_activate:
            next_pool_wait = seconds_human(new.next_pool_activation_ts - now_ts())
            next_pool = self.pool_link(new.next_pool_to_activate)
            message += f"–í–µ—Ä–æ—è—Ç–Ω–æ, –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—É–ª: {next_pool} —á–µ—Ä–µ–∑ {next_pool_wait}."
        else:
            message += f"–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –¥–æ—Å—Ç–æ–π–Ω–æ–≥–æ –ø—É–ª–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."

        return message

    # ------- NETWORK NODES -------

    TEXT_PIC_ACTIVE_NODES = '–ê–∫—Ç–∏–≤–Ω—ã–µ'
    TEXT_PIC_STANDBY_NODES = '–û–∂–∏–¥–∞—é—â–∏–µ'
    TEXT_PIC_ALL_NODES = '–í—Å–µ –Ω–æ–¥—ã'
    TEXT_PIC_NODE_DIVERSITY = '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–¥'
    TEXT_PIC_NODE_DIVERSITY_SUBTITLE = '–ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã'
    TEXT_PIC_OTHERS = '–î—Ä—É–≥–∏–µ'
    TEXT_PIC_UNKNOWN = '–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ'

    def _format_node_text(self, node: NodeInfo, add_status=False, extended_info=False):
        node_ip_link = link(f'https://www.infobyip.com/ip-{node.ip_address}.html', node.ip_address)
        thor_explore_url = get_explorer_url_to_address(self.cfg.network_id, Chains.THOR, node.node_address)
        node_thor_link = link(thor_explore_url, short_address(node.node_address))

        node_status = node.status.lower()
        if node_status == node.STANDBY:
            status = '–û–∂–∏–¥–∞–Ω–∏–µ'
        elif node_status == node.ACTIVE:
            status = '–ê–∫—Ç–∏–≤–Ω–∞'
        elif node_status == node.DISABLED:
            status = '–û—Ç–∫–ª—é—á–µ–Ω–∞!'
        else:
            status = node.status

        extra = ''
        if extended_info:
            if node.slash_points:
                extra += f", {bold(node.slash_points)} —à—Ç—Ä–∞—Ñ–æ–≤"
            if node.current_award:
                award_text = bold(pretty_money(node.current_award, postfix=RAIDO_GLYPH))
                extra += f", {award_text} –Ω–∞–≥—Ä–∞–¥—ã"

        status = f', ({pre(status)})' if add_status else ''
        return f'{bold(node_thor_link)} ({node_ip_link}, –≤–µ—Ä—Å–∏—è {node.version}) ' \
               f'—Å {bold(pretty_money(node.bond, postfix=RAIDO_GLYPH))} –±–æ–Ω–¥ {status}{extra}'.strip()

    def notification_text_for_node_churn(self, changes: NodeInfoChanges):
        message = ''

        if changes.nodes_activated or changes.nodes_deactivated:
            message += bold('‚ôªÔ∏è –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –Ω–æ–¥') + '\n\n'

        message += self._make_node_list(changes.nodes_added, 'üÜï –ù–æ–≤—ã–µ –Ω–æ–¥—ã –ø–æ—è–≤–∏–ª–∏—Å—å:', add_status=True)
        message += self._make_node_list(changes.nodes_activated, '‚û°Ô∏è –ù–æ–¥—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–Ω—ã:')
        message += self._make_node_list(changes.nodes_deactivated, '‚¨ÖÔ∏èÔ∏è –ù–æ–¥—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã:')
        message += self._make_node_list(changes.nodes_removed, 'üóëÔ∏è –ù–æ–¥—ã –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å –∏–ª–∏ –∏—Å—á–µ–∑–ª–∏:', add_status=True)

        return message.rstrip()

    def node_list_text(self, nodes: List[NodeInfo], status):
        message = bold('üï∏Ô∏è THORChain –Ω–æ–¥—ã (—É–∑–ª—ã)') + '\n\n' if status == NodeInfo.ACTIVE else ''

        if status == NodeInfo.ACTIVE:
            active_nodes = [n for n in nodes if n.is_active]
            message += self._make_node_list(active_nodes, '‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–æ–¥—ã:', extended_info=True)
        elif status == NodeInfo.STANDBY:
            standby_nodes = [n for n in nodes if n.is_standby]
            message += self._make_node_list(standby_nodes, '‚è± –û–∂–∏–¥–∞—é—â–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–æ–¥—ã:', extended_info=True)
        else:
            other_nodes = [n for n in nodes if n.in_strange_status]
            message += self._make_node_list(other_nodes, '‚ùî –ù–æ–¥—ã –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö:', add_status=True,
                                            extended_info=True)

        return message.rstrip()

    def notification_text_trading_halted(self, chain_info: ThorChainInfo):
        if chain_info.halted:
            return f'üö®üö®üö® <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ {code(chain_info.chain)}! ' \
                   f'–í–æ–∑–¥–µ—Ä–∂–∏—Ç–µ—Å—å –æ—Ç –æ–±–º–µ–Ω–æ–≤, –ø–æ–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª—è –Ω–µ –±—É–¥–µ—Ç —Å–Ω–æ–≤–∞ –∑–∞–ø—É—â–µ–Ω–∞! üö®üö®üö®'
        else:
            return f'‚úÖ <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –¢–æ—Ä–≥–æ–≤–ª—è —Å–Ω–æ–≤–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ {code(chain_info.chain)}!'
