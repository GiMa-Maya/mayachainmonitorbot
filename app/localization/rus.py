from datetime import datetime
from math import ceil
from typing import List

from aiothornode.types import ThorChainInfo, ThorBalances
from semver import VersionInfo

from localization.base import BaseLocalization, RAIDO_GLYPH, CREATOR_TG, URL_LEADERBOARD_MCCN
from services.lib.constants import Chains, thor_to_float, rune_origin, BNB_RUNE_SYMBOL
from services.lib.date_utils import format_time_ago, seconds_human, now_ts
from services.lib.explorers import get_explorer_url_to_address, get_explorer_url_to_tx
from services.lib.money import pretty_dollar, pretty_money, short_address, adaptive_round_to_str, calc_percent_change, \
    emoji_for_percent_change, Asset, short_money, short_dollar, format_percent
from services.lib.texts import bold, link, code, ital, pre, x_ses, progressbar, bracketify, \
    up_down_arrow, plural, grouper
from services.models.bep2 import BEP2Transfer, BEP2CEXFlow
from services.models.cap_info import ThorCapInfo
from services.models.last_block import BlockSpeed
from services.models.mimir import MimirChange, MimirHolder
from services.models.net_stats import NetworkStats
from services.models.node_info import NodeSetChanges, NodeInfo, NodeVersionConsensus, NodeEvent, EventDataSlash, \
    NodeEventType, EventBlockHeight
from services.models.pool_info import PoolInfo, PoolChanges, PoolDetailHolder
from services.models.price import PriceReport, RuneMarketInfo
from services.models.queue import QueueInfo
from services.models.tx import ThorTxExtended, ThorTxType


class RussianLocalization(BaseLocalization):
    LOADING = '‚åõ –ó–∞–≥—Ä—É–∑–∫–∞...'
    SUCCESS = '‚úÖ –£—Å–ø–µ—Ö!'
    ND = '–ù–µ–æ–ø—Ä.'
    NA = '–ù/–î'

    BOT_LOADING = '‚åõ –ë–æ—Ç –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ –≤—Å–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç.'

    SHORT_MONEY_LOC = {
        'K': ' —Ç—ã—Å',
        'M': ' –º–ª–Ω',
        'B': ' –º–ª—Ä–¥',
        'T': ' —Ç—Ä–ª–Ω',
    }

    # ---- WELCOME ----
    def help_message(self):
        return (
            f"–≠—Ç–æ—Ç –±–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –∫—Ä—É–ø–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö —Å —Å–µ—Ç–∏ {link(self.THORCHAIN_LINK, 'THORChain')}.\n"
            f"–ö–æ–º–∞–Ω–¥—ã:\n"
            f"/help ‚Äì —ç—Ç–∞ –ø–æ–º–æ—â—å\n"
            f"/start ‚Äì –∑–∞–ø—É—Å–∫ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            f"/lang ‚Äì –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\n"
            f"/cap ‚Äì —Ç–µ–∫—É—â–∏–π –∫–∞–ø –¥–ª—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –≤ –ø—É–ª–∞—Ö Chaosnet\n"
            f"/price ‚Äì —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {self.R}\n"
            f"/queue ‚Äì —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
            f"/nodes ‚Äì —Å–ø–∏—Å–æ–∫ –Ω–æ–¥\n"
            f"/stats ‚Äì THORChain —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏\n"
            f"/chains ‚Äì –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –±–ª–æ–∫—á–µ–π–Ω—ã\n"
            f"/lp ‚Äì –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∞—à–∏—Ö –ø—É–ª–æ–≤\n"
            f"<b>‚ö†Ô∏è –ë–æ—Ç —Ç–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ {self.alert_channel_name}!</b>\n"
            f"ü§ó –û—Ç–∑—ã–≤—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {CREATOR_TG}."
        )

    def welcome_message(self, info: ThorCapInfo):
        return (
            f"–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ THORChain –∏ —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –≤ –ø—É–ª—ã.\n"
            f"–¶–µ–Ω–∞ {self.R} —Å–µ–π—á–∞—Å <code>{info.price:.3f} $</code>.\n"
            f"<b>‚ö†Ô∏è –ë–æ—Ç —Ç–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ {self.alert_channel_name}!</b>\n"
            f"–ù–∞–±–µ—Ä–∏ /help, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
            f"ü§ó –û—Ç–∑—ã–≤—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {CREATOR_TG}."
        )

    def unknown_command(self):
        return (
            "üôÑ –ò–∑–≤–∏–Ω–∏, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ù–∞–∂–º–∏ –Ω–∞ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
        )

    # ----- MAIN MENU ------

    BUTTON_MM_MY_ADDRESS = 'üè¶ –ú–æ–∏ LP –∞–¥—Ä–µ—Å–∞'
    BUTTON_MM_METRICS = 'üìê –ú–µ—Ç—Ä–∏–∫–∏'
    BUTTON_MM_SETTINGS = f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'
    BUTTON_MM_MAKE_AVATAR = f'ü¶π‚ÄçÔ∏èÔ∏è –°–¥–µ–ª–∞–π –∞–≤—É'
    BUTTON_MM_NODE_OP = 'ü§ñ –û–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –Ω–æ–¥'

    # ------ LP INFO -----

    BUTTON_SM_ADD_ADDRESS = '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å'
    BUTTON_BACK = 'üîô –ù–∞–∑–∞–¥'
    BUTTON_SM_BACK_TO_LIST = 'üîô –ù–∞–∑–∞–¥ –∫ –∞–¥—Ä–µ—Å–∞–º'
    BUTTON_SM_BACK_MM = 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'

    BUTTON_SM_SUMMARY = 'üí≤ –°–≤–æ–¥–∫–∞'

    BUTTON_VIEW_RUNE_DOT_YIELD = 'üåé –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ runeyield.info'
    BUTTON_VIEW_VALUE_ON = '–°–∫—Ä—ã—Ç—å –¥–µ–Ω—å–≥–∏: –ù–ï–¢'
    BUTTON_VIEW_VALUE_OFF = '–°–∫—Ä—ã—Ç—å –¥–µ–Ω—å–≥–∏: –î–ê'

    BUTTON_LP_PROT_ON = 'IL –∑–∞—â–∏—Ç–∞: –î–ê'
    BUTTON_LP_PROT_OFF = 'IL –∑–∞—â–∏—Ç–∞: –ù–ï–¢'

    BUTTON_REMOVE_THIS_ADDRESS = '‚ùå –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å—Å'

    TEXT_NO_ADDRESSES = "üîÜ –í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤. –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∞–¥—Ä–µ—Å, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å."
    TEXT_YOUR_ADDRESSES = 'üîÜ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∞–¥—Ä–µ—Å–∞:'
    TEXT_INVALID_ADDRESS = code('‚õîÔ∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∞–¥—Ä–µ—Å–∞!')
    TEXT_SELECT_ADDRESS_ABOVE = '–í—ã–±–µ—Ä–∏ –∞–¥—Ä–µ—Å –≤—ã—à–µ ‚òùÔ∏è '
    TEXT_SELECT_ADDRESS_SEND_ME = '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å, –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ –º–Ω–µ üëá'
    TEXT_LP_NO_POOLS_FOR_THIS_ADDRESS = 'üì™ <b>–ù–∞ —ç—Ç–æ–º –∞–¥—Ä–µ—Å–µ –Ω–µ—Ç –ø—É–ª–æ–≤ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏.</b> ' \
                                        '–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π.'

    def text_lp_img_caption(self):
        bot_link = "@" + self.this_bot_name
        start_me = self.url_start_me
        return f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {link(start_me, bot_link)}'

    LP_PIC_POOL = '–ü–£–õ'
    LP_PIC_RUNE = 'RUNE'
    LP_PIC_ADDED = '–î–æ–±–∞–≤–ª–µ–Ω–æ'
    LP_PIC_WITHDRAWN = '–í—ã–≤–µ–¥–µ–Ω–æ'
    LP_PIC_REDEEM = '–ú–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å'
    LP_PIC_GAIN_LOSS = '–î–æ—Ö–æ–¥ / —É–±—ã—Ç–æ–∫'
    LP_PIC_IN_USD = '–≤ USD'
    LP_PIC_IN_USD_CAP = '–∏–ª–∏ –≤ USD'
    LP_PIC_R_RUNE = f'–í {RAIDO_GLYPH}une'
    LP_PIC_IN_ASSET = '–∏–ª–∏ –≤ {0}'
    LP_PIC_ADDED_VALUE = '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Å–µ–≥–æ'
    LP_PIC_WITHDRAWN_VALUE = '–í—ã–≤–µ–¥–µ–Ω–æ –≤—Å–µ–≥–æ'
    LP_PIC_CURRENT_VALUE = '–í –ø—É–ª–µ (+—á–∞–π)'
    LP_PIC_PRICE_CHANGE = '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã'
    LP_PIC_PRICE_CHANGE_2 = '—Å 1–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'
    LP_PIC_LP_VS_HOLD = '–ü—Ä–æ—Ç–∏–≤ –•–û–õ–î'
    LP_PIC_LP_APY = '–ì–æ–¥–æ–≤—ã—Ö'
    LP_PIC_LP_APY_OVER_LIMIT = '–û—á–µ–Ω—å –º–Ω–æ–≥–æ %'
    LP_PIC_EARLY = '–ï—â–µ —Ä–∞–Ω–æ...'
    LP_PIC_FOOTER = ""  # my LP scanner is used
    LP_PIC_FEES = '–í–∞—à–∏ —á–∞–µ–≤—ã–µ'
    LP_PIC_IL_PROTECTION = '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ç IL'
    LP_PIC_NO_NEED_PROTECTION = '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'
    LP_PIC_EARLY_TO_PROTECT = '–†–∞–Ω–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...'
    LP_PIC_PROTECTION_DISABLED = '–û—Ç–∫–ª—é—á–µ–Ω–∞'

    LP_PIC_SUMMARY_HEADER = '–°–≤–æ–¥–∫–∞ –ø–æ –ø—É–ª–∞–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏'
    LP_PIC_SUMMARY_ADDED_VALUE = '–î–æ–±–∞–≤–ª–µ–Ω–æ'
    LP_PIC_SUMMARY_WITHDRAWN_VALUE = '–í—ã–≤–µ–¥–µ–Ω–æ'
    LP_PIC_SUMMARY_CURRENT_VALUE = '–°–µ–π—á–∞—Å –≤ –ø—É–ª–µ'
    LP_PIC_SUMMARY_TOTAL_GAIN_LOSS = '–î–æ—Ö–æ–¥/—É–±—ã—Ç–æ–∫'
    LP_PIC_SUMMARY_TOTAL_GAIN_LOSS_PERCENT = '–î–æ—Ö–æ–¥/—É–±—ã—Ç–æ–∫ %'
    LP_PIC_SUMMARY_AS_IF_IN_RUNE = f'–ï—Å–ª–∏ –≤—Å–µ –≤ {RAIDO_GLYPH}'
    LP_PIC_SUMMARY_AS_IF_IN_USD = '–ï—Å–ª–∏ –≤—Å–µ –≤ $'
    LP_PIC_SUMMARY_TOTAL_LP_VS_HOLD = '–ò—Ç–æ–≥–æ —Ö–æ–ª–¥ –ø—Ä–æ—Ç–∏–≤ –ø—É–ª–æ–≤, $'
    LP_PIC_SUMMARY_NO_WEEKLY_CHART = "–ù–µ—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞, –∏–∑–≤–∏–Ω–∏—Ç–µ..."

    def pic_lping_days(self, total_days, first_add_ts):
        start_date = datetime.fromtimestamp(first_add_ts).strftime('%d.%m.%Y')
        return f'{ceil(total_days)} –¥–Ω. ({start_date})'

    def text_lp_loading_pools(self, address):
        return f'‚è≥ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.</b>\n' \
               f'–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –ø—É–ª–æ–≤ –¥–ª—è –∞–¥—Ä–µ—Å–∞ {pre(address)}...\n' \
               f'–ò–Ω–æ–≥–¥–∞ –æ–Ω–∞ –º–æ–∂–µ—Ç –∏–¥—Ç–∏ –¥–æ–ª–≥–æ, –µ—Å–ª–∏ Midgard —Å–∏–ª—å–Ω–æ –Ω–∞–≥—Ä—É–∂–µ–Ω.'

    def text_user_provides_liq_to_pools(self, address, pools, balances: ThorBalances):
        pools = pre(', '.join(pools))
        explorer_links = self.explorer_links_to_thor_address(address)

        balance_str = ''
        if balances is not None:
            bal = balances.runes_float
            balance_str = f'–ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞ : {pre(short_money(bal, prefix=RAIDO_GLYPH))}.\n\n'

        return f'üõ≥Ô∏è {pre(address)}\n' \
               f'–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–ª—ã:\n{pools}.\n\n' \
               f"üîç –û–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—å: {explorer_links}.\n\n{balance_str}" \
               f'üëá –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏.'

    def text_lp_today(self):
        today = datetime.now().strftime('%d.%m.%Y')
        return f'–°–µ–≥–æ–¥–Ω—è: {today}'

    # ----- CAP ------

    def notification_text_cap_change(self, old: ThorCapInfo, new: ThorCapInfo):
        up = old.cap < new.cap
        verb = "–ø–æ–¥—Ä–æ—Å" if up else "—É–ø–∞–ª"
        arrow = '‚¨ÜÔ∏è' if up else '‚ö†Ô∏è ‚¨áÔ∏è'
        call = "–ê–π-–¥–∞ –∑–∞–ø—É–ª–∏–º –µ—â–µ!\n" if up else ''
        return (
            f'{arrow} <b>–ö–∞–ø {verb} —Å {pretty_money(old.cap)} –¥–æ {pretty_money(new.cap)}!</b>\n'
            f'–°–µ–π—á–∞—Å –≤ –ø—É–ª—ã –ø–æ–º–µ—â–µ–Ω–æ <b>{pretty_money(new.pooled_rune)}</b> {self.R}.\n'
            f"{self._cap_progress_bar(new)}\n"
            f'ü§≤üèª –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ {bold(pretty_money(new.how_much_rune_you_can_lp) + " " + RAIDO_GLYPH)} {self.R} '
            f'–∏–ª–∏ {bold(pretty_dollar(new.how_much_usd_you_can_lp))}.\n'
            f'–¶–µ–Ω–∞ {self.R} –≤ –ø—É–ª–µ <code>{new.price:.3f} $</code>.\n'
            f'{call}'
            f'{self.thor_site()}'
        )

    def notification_text_cap_full(self, cap: ThorCapInfo):
        return (
            'üôÜ‚Äç‚ôÄÔ∏è <b>–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–µ–ª–∞!</b>\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –Ω–∏—á–µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—É–ª—ã. '
            '–í—ã –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–≤—Ä–∞—Ç –≤–∞—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤!\n'
            f'<b>{pretty_money(cap.pooled_rune)} {self.R}</b> –∏–∑ '
            f"<b>{pretty_money(cap.cap)} {self.R}</b> —Å–µ–π—á–∞—Å –≤ –ø—É–ª–∞—Ö.\n"
            f"{self._cap_progress_bar(cap)}\n"
        )

    def notification_text_cap_opened_up(self, cap: ThorCapInfo):
        return (
            'üí° <b>–û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ –≤ –ø—É–ª–∞—Ö –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏!</b>\n'
            f'–°–µ–π—á–∞—Å –≤ –ø—É–ª–∞—Ö <i>{pretty_money(cap.pooled_rune)} {self.R}</i> –∏–∑ '
            f"<i>{pretty_money(cap.cap)} {self.R}</i> –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö.\n"
            f"{self._cap_progress_bar(cap)}\n"
            f'ü§≤üèª –í—ã –º–æ–∂–µ—â–µ –µ—â–µ –¥–æ–±–∞–≤–∏—Ç—å {bold(pretty_money(cap.how_much_rune_you_can_lp) + " " + RAIDO_GLYPH)} {self.R} '
            f'–∏–ª–∏ {bold(pretty_dollar(cap.how_much_usd_you_can_lp))}.\nüëâüèª {self.thor_site()}'
        )

    # ------ PRICE -------

    PRICE_GRAPH_TITLE = f'–¶–µ–Ω–∞ {RAIDO_GLYPH}—É–Ω—ã'
    PRICE_GRAPH_LEGEND_DET_PRICE = '–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç—Å–∫–∞—è —Ü–µ–Ω–∞'
    PRICE_GRAPH_LEGEND_ACTUAL_PRICE = '–¶–µ–Ω–∞ –ø—É–ª–æ–≤'
    PRICE_GRAPH_LEGEND_CEX_PRICE = f'Binance —Ü–µ–Ω–∞'

    # ------ TXS -------

    TEXT_MORE_TXS = ' –∏ {n} –µ—â–µ'

    @staticmethod
    def none_str(x):
        return '–Ω–µ—Ç' if x is None else x

    def notification_text_large_tx(self, tx: ThorTxExtended,
                                   usd_per_rune: float,
                                   pool_info: PoolInfo,
                                   cap: ThorCapInfo = None):
        (ap, asset_side_usd_short, chain, percent_of_pool, pool_depth_usd, rp, rune_side_usd_short,
         total_usd_volume) = self.lp_tx_calculations(usd_per_rune, pool_info, tx)

        heading = ''
        if tx.type == ThorTxType.TYPE_ADD_LIQUIDITY:
            heading = f'üê≥ <b>–ö–∏—Ç –¥–æ–±–∞–≤–∏–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏</b> üü¢'
        elif tx.type == ThorTxType.TYPE_WITHDRAW:
            heading = f'üê≥ <b>–ö–∏—Ç –≤—ã–≤–µ–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å</b> üî¥'
        elif tx.type == ThorTxType.TYPE_DONATE:
            heading = f'üôå <b>–ë–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—É–ª</b>'
        elif tx.type == ThorTxType.TYPE_SWAP:
            heading = f'üê≥ <b>–ö—Ä—É–ø–Ω—ã–π –æ–±–º–µ–Ω</b> üîÅ'
        elif tx.type == ThorTxType.TYPE_REFUND:
            heading = f'üê≥Ô∏è <b>–ë–æ–ª—å—à–æ–π –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤</b> ‚Ü©Ô∏è‚ùó'
        elif tx.type == ThorTxType.TYPE_SWITCH:
            heading = f'üê≥ <b>–ö—Ä—É–ø–Ω—ã–π –∞–ø–≥—Ä–µ–π–¥ {self.R}</b> üÜô'

        asset = Asset(tx.first_pool).name

        content = ''
        if tx.type in (ThorTxType.TYPE_ADD_LIQUIDITY, ThorTxType.TYPE_WITHDRAW, ThorTxType.TYPE_DONATE):
            if tx.affiliate_fee > 0:
                aff_text = f'–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –±–æ–Ω—É—Å: {bold(short_dollar(tx.get_affiliate_fee_usd(usd_per_rune)))} ' \
                           f'({format_percent(tx.affiliate_fee)})\n'
            else:
                aff_text = ''
            content = (
                f"<b>{pretty_money(tx.rune_amount)} {self.R}</b> ({rp:.0f}% = {rune_side_usd_short}) ‚ÜîÔ∏è "
                f"<b>{pretty_money(tx.asset_amount)} {asset}</b> "
                f"({ap:.0f}% = {asset_side_usd_short})\n"
                f"–í—Å–µ–≥–æ: <code>${pretty_money(total_usd_volume)}</code> ({percent_of_pool:.2f}% –æ—Ç –≤—Å–µ–≥–æ –ø—É–ª–∞).\n"
                f"{aff_text}"
                f"–ì–ª—É–±–∏–Ω–∞ –ø—É–ª–∞ —Å–µ–π—á–∞—Å: <b>${pretty_money(pool_depth_usd)}</b>.\n"
            )
        elif tx.type == ThorTxType.TYPE_SWITCH:
            # [Amt] Rune [Blockchain: ERC20/BEP2] -> [Amt] THOR Rune ($usd)
            if tx.first_input_tx and tx.first_output_tx:
                amt = thor_to_float(tx.first_input_tx.first_amount)
                origin = rune_origin(tx.first_input_tx.first_asset)
                content = f"{bold(pretty_money(amt))} {origin} {self.R} ‚û°Ô∏è {bold(pretty_money(amt))} –ù–∞—Ç–∏–≤–Ω—ã—Ö {self.R}"
        elif tx.type == ThorTxType.TYPE_REFUND:
            inputs = tx.get_asset_summary(in_only=True, short_name=True)
            outputs = tx.get_asset_summary(out_only=True, short_name=True)

            input_str = ', '.join(f"{bold(pretty_money(amount))} {asset}" for asset, amount in inputs.items())
            output_str = ', '.join(f"{bold(pretty_money(amount))} {asset}" for asset, amount in outputs.items())

            content = (
                f"{input_str} ‚û°Ô∏è {output_str} ({pretty_dollar(tx.get_usd_volume(usd_per_rune))})\n"
                f"\n–ü—Ä–∏—á–∏–Ω–∞: {pre(tx.meta_refund.reason[:180])}"
            )
        elif tx.type == ThorTxType.TYPE_SWAP:
            content = self.tx_convert_string(tx, usd_per_rune)
            slip_str = f'{tx.meta_swap.trade_slip_percent:.3f} %'
            l_fee_usd = tx.meta_swap.liquidity_fee_rune_float * usd_per_rune

            if tx.affiliate_fee > 0:
                aff_text = f'–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –±–æ–Ω—É—Å: {bold(short_dollar(tx.get_affiliate_fee_usd(usd_per_rune)))} ' \
                           f'({format_percent(tx.affiliate_fee)})\n'
            else:
                aff_text = ''

            content += (
                f"\n{aff_text}"
                f"–ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: {bold(slip_str)}\n"
                f"–ö–æ–º–∏—Å—Å–∏—è –ø—É–ª–∞–º: {bold(pretty_dollar(l_fee_usd))}"
            )

        blockchain_components = [f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.link_to_explorer_user_address_for_tx(tx)}"]

        if tx.in_tx:
            in_links = self.links_to_txs(tx.in_tx, tx.tx_hash)
            if in_links:
                blockchain_components.append('–í—Ö–æ–¥—ã: ' + in_links)

        if tx.out_tx:
            out_links = self.links_to_txs(tx.out_tx, tx.tx_hash)
            if out_links:
                blockchain_components.append('–í—ã—Ö–æ–¥—ã: ' + out_links)

        msg = f"{heading}\n{content}\n" + " / ".join(blockchain_components)

        if cap:
            msg += (
                f"\n\n"
                f"–ö–∞–ø –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ {self._cap_progress_bar(cap)}.\n"
                f'–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ {code(pretty_money(cap.how_much_rune_you_can_lp))} {bold(self.R)} '
                f'({pretty_dollar(cap.how_much_usd_you_can_lp)}).'
            )

        return msg.strip()

    # ------- QUEUE -------

    def notification_text_queue_update(self, item_type, step, value):
        if step == 0:
            return f"‚ò∫Ô∏è –û—á–µ—Ä–µ–¥—å {item_type} —Å–Ω–æ–≤–∞ –æ–ø—É—Å—Ç–µ–ª–∞!"
        else:
            return f"ü§¨ <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –û—á–µ—Ä–µ–¥—å {code(item_type)} –∏–º–µ–µ—Ç {value} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!"

    # ------- PRICE -------

    def notification_text_price_update(self, p: PriceReport, ath=False, halted_chains=None):
        title = bold('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã') if not ath else bold('üöÄ –î–æ—Å—Ç–∏–≥–Ω—É—Ç—å –Ω–æ–≤—ã–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º–∞–∫—Å–∏–º—É–º!')

        c_gecko_url = 'https://www.coingecko.com/ru/' \
                      '%D0%9A%D1%80%D0%B8%D0%BF%D1%82%D0%BE%D0%B2%D0%B0%D0%BB%D1%8E%D1%82%D1%8B/thorchain'
        c_gecko_link = link(c_gecko_url, 'RUNE')

        message = f"{title} | {c_gecko_link}\n\n"

        if halted_chains:
            hc = pre(', '.join(halted_chains))
            message += f"üö® <code>–¢–æ—Ä–≥–æ–≤–ª—è –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {hc}.</code>\n\n"

        price = p.market_info.pool_rune_price

        btc_price = f"‚Çø {p.btc_pool_rune_price:.8f}"
        pr_text = f"${price:.2f}"
        message += f"–¶–µ–Ω–∞ <b>RUNE</b> —Å–µ–π—á–∞—Å {code(pr_text)} ({btc_price}).\n"

        fp = p.market_info

        if fp.cex_price > 0.0:
            message += f"–¶–µ–Ω–∞ <b>RUNE</b> –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –±–∏—Ä–∂–µ Binance: {bold(pretty_dollar(fp.cex_price))}.\n"

            div = abs(fp.cex_price - price)
            div_p = 100.0 * abs(1.0 - fp.cex_price / price) if price != 0 else 0.0
            message += f"<b>–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ</b> —Ä–æ–¥–Ω–æ–π –∏ BEP2 –†—É–Ω—ã: {code(pretty_dollar(div))} ({div_p:.1f}%).\n"

        last_ath = p.last_ath
        if last_ath is not None and ath:
            if isinstance(last_ath.ath_date, float):
                last_ath_pr = f'{last_ath.ath_price:.2f}'
            else:
                last_ath_pr = str(last_ath.ath_price)
            ago_str = self.format_time_ago(now_ts() - last_ath.ath_date)
            message += f"–ü–æ—Å–ª–µ–¥–Ω–∏–π ATH –±—ã–ª ${pre(last_ath_pr)} ({ago_str}).\n"

        time_combos = zip(
            ('1—á.', '24—á.', '7–¥–Ω.'),
            (p.price_1h, p.price_24h, p.price_7d)
        )
        for title, old_price in time_combos:
            if old_price:
                pc = calc_percent_change(old_price, price)
                message += pre(f"{title.rjust(5)}:{adaptive_round_to_str(pc, True).rjust(8)} % "
                               f"{emoji_for_percent_change(pc).ljust(4).rjust(6)}") + "\n"

        if fp.rank >= 1:
            message += f"–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {bold(pretty_dollar(fp.market_cap))} (#{bold(fp.rank)} –º–µ—Å—Ç–æ)\n"

        if fp.total_trade_volume_usd > 0:
            message += f"–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {bold(pretty_dollar(fp.total_trade_volume_usd))}.\n"

        message += '\n'

        if fp.tlv_usd >= 1:
            message += (f"TVL (–Ω–µ-RUNE –∞–∫—Ç–∏–≤–æ–≤): ${bold(pretty_money(fp.tlv_usd))}\n"
                        f"–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞: {code(pretty_money(fp.fair_price, prefix='$'))}\n"
                        f"–°–ø–µ–∫—É–ª—è—Ç–∏–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: {pre(x_ses(fp.fair_price, price))}\n")

        return message.rstrip()

    # ------- POOL CHURN -------

    def notification_text_pool_churn(self, pc: PoolChanges):
        if pc.pools_changed:
            message = bold('üèä –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—É–ª–∞—Ö –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:') + '\n\n'
        else:
            message = ''

        ru_stat = {
            PoolInfo.DEPRECATED_ENABLED: '–≤–∫–ª—é—á–µ–Ω',
            PoolInfo.AVAILABLE: '–≤–∫–ª—é—á–µ–Ω',
            PoolInfo.SUSPENDED: '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',

            PoolInfo.DEPRECATED_BOOTSTRAP: '–æ–∂–∏–¥–∞–µ—Ç',
            PoolInfo.STAGED: '–æ–∂–∏–¥–∞–µ—Ç'
        }

        def pool_text(pool_name, status, to_status=None):
            if PoolInfo.is_status_enabled(to_status):
                extra = 'üéâ –ü–£–õ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù. –ú–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –æ–±–º–µ–Ω—ã!'
            else:
                extra = ital(ru_stat[status])
                if to_status is not None:
                    extra += f' ‚Üí {ital(ru_stat[to_status])}'
                extra = f'({extra})'
            return f'  ‚Ä¢ {self.pool_link(pool_name)}: {extra}'

        if pc.pools_added:
            message += '‚úÖ –ü—É–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n' + '\n'.join([pool_text(*a) for a in pc.pools_added]) + '\n'
        if pc.pools_removed:
            message += '‚ùå –ü—É–ª—ã —É–¥–∞–ª–µ–Ω—ã:\n' + '\n'.join([pool_text(*a) for a in pc.pools_removed]) + '\n'
        if pc.pools_changed:
            message += 'üîÑ –ü—É–ª—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å:\n' + '\n'.join([pool_text(*a) for a in pc.pools_changed]) + '\n'

        return message.rstrip()

    # -------- SETTINGS --------

    BUTTON_SET_LANGUAGE = 'üåê –Ø–∑—ã–∫'
    TEXT_SETTING_INTRO = '<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö?'
    BUTTON_SET_NODE_OP_GOTO = '–û–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –Ω–æ–¥'

    # -------- METRICS ----------

    BUTTON_METR_S_FINANCIAL = 'üí± –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ'
    BUTTON_METR_S_NET_OP = 'üî© –†–∞–±–æ—Ç–∞ —Å–µ—Ç–∏'

    BUTTON_METR_CAP = '‚úã –ö–∞–ø –ª–∏–≤–∫–∏–¥–Ω–æ—Å—Ç–∏'
    BUTTON_METR_PRICE = f'üí≤ {BaseLocalization.R} –∏–Ω—Ñ–æ –æ —Ü–µ–Ω–µ'
    BUTTON_METR_QUEUE = f'üë• –û—á–µ—Ä–µ–¥—å'
    BUTTON_METR_STATS = f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
    BUTTON_METR_NODES = 'üñ• –ù–æ–¥—ã (—É–∑–ª—ã)'
    BUTTON_METR_LEADERBOARD = 'üèÜ –î–æ—Å–∫–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤'
    BUTTON_METR_CHAINS = '‚õìÔ∏è –ë–ª–æ–∫—á–µ–π–Ω—ã'
    BUTTON_METR_MIMIR = 'üéÖ –ú–∏–º–∏—Ä'
    BUTTON_METR_VOTING = 'üèõÔ∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ'
    BUTTON_METR_BLOCK_TIME = '‚è±Ô∏è –í—Ä–µ–º—è –±–ª–æ–∫–æ–≤'
    BUTTON_METR_TOP_POOLS = 'üèä –¢–æ–ø –ü—É–ª–æ–≤'
    BUTTON_METR_CEX_FLOW = 'üå¨ –ü–æ—Ç–æ–∫ –±–∏—Ä–∂'

    TEXT_METRICS_INTRO = '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?'

    def cap_message(self, info: ThorCapInfo):
        if info.can_add_liquidity:
            rune_vacant = info.how_much_rune_you_can_lp
            usd_vacant = rune_vacant * info.price
            more_info = f'ü§≤üèª –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ {bold(pretty_money(rune_vacant) + " " + RAIDO_GLYPH)} {self.R} ' \
                        f'–∏–ª–∏ {bold(pretty_dollar(usd_vacant))}.\nüëâüèª {self.thor_site()}'
        else:
            more_info = 'üõë –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å —Å–µ–π—á–∞—Å. –î–æ–∂–¥–∏—Ç–µ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–Ω—è—Ç–∏–∏ –∫–∞–ø—ã!'

        return (
            f"<b>{pretty_money(info.pooled_rune)} {RAIDO_GLYPH} {self.R}</b> –º–æ–Ω–µ—Ç –∏–∑ "
            f"<b>{pretty_money(info.cap)} {RAIDO_GLYPH} {self.R}</b> —Å–µ–π—á–∞—Å –≤ –ø—É–ª–∞—Ö.\n"
            f"{self._cap_progress_bar(info)}\n"
            f"{more_info}\n"
            f"–¶–µ–Ω–∞ {bold(self.R)} —Å–µ–π—á–∞—Å <code>{info.price:.3f} $</code>.\n"
        )

    def text_leaderboard_info(self):
        return f"üèÜ –î–æ—Å–∫–∞ –ª—É—à—á–∏—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ THORChain:\n" \
               f"\n" \
               f" üëâ {bold(URL_LEADERBOARD_MCCN)} üëà\n"

    def queue_message(self, queue_info: QueueInfo):
        return (
                   f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—á–µ—Ä–µ–¥—è—Ö:</b>\n"
                   f"–ò—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (outbound): {code(queue_info.outbound)} —à—Ç.\n"
                   f"–û—á–µ—Ä–µ–¥—å –æ–±–º–µ–Ω–æ–≤ (swap): {code(queue_info.swap)} —à—Ç.\n"
                   f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—á–µ—Ä–µ–¥—å (internal): {code(queue_info.internal)} —à—Ç.\n"
               ) + (
                   f"–ï—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –º–Ω–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –≤–∞—à–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç –∑–∞–Ω—è—Ç—å –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–±—ã—á–Ω–æ."
                   if queue_info.is_full else ''
               )

    TEXT_PRICE_INFO_ASK_DURATION = '–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫?'

    BUTTON_1_HOUR = '1 —á–∞—Å–æ–≤'
    BUTTON_24_HOURS = '24 —á–∞—Å–∞'
    BUTTON_1_WEEK = '1 –Ω–µ–¥–µ–ª—è'
    BUTTON_30_DAYS = '30 –¥–Ω–µ–π'

    # ------- AVATAR -------

    TEXT_AVA_WELCOME = 'üñºÔ∏è –°–∫–∏–Ω—å –º–Ω–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —Ñ–æ—Ç–æ, –∏ —è —Å–¥–µ–ª–∞—é –¥–ª—è —Ç–µ–±—è –∞–≤–∞—Ç–∞—Ä –≤ —Å—Ç–∏–ª–µ THORChain ' \
                       '—Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–π —Ä–∞–º–∫–æ–π. –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç, ' \
                       '—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º –ø–æ—Ç–µ—Ä–µ–π –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑-–∑–∞ —Å–∂–∞—Ç–∏—è.'

    TEXT_AVA_ERR_INVALID = '‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞!'
    TEXT_AVA_ERR_NO_PIC = '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–≤–æ–µ —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è!'
    TEXT_AVA_READY = 'ü•≥ <b>–¢–≤–æ–π THORChain –∞–≤–∞—Ç–∞—Ä –≥–æ—Ç–æ–≤!</b> ' \
                     '–°–∫–∞—á–∞–π —ç—Ç–æ —Ñ–æ—Ç–æ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö.'

    BUTTON_AVA_FROM_MY_USERPIC = 'üòÄ –ò–∑ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è'

    # ------- NETWORK SUMMARY -------

    def network_bond_security_text(self, network_security_ratio):
        if network_security_ratio > 0.9:
            return "ü•± –ù–ï–≠–§–§–ï–ö–¢–ò–í–ù–ê"
        elif 0.9 >= network_security_ratio > 0.75:
            return "ü•∏ –ü–ï–†–ï–û–ë–ï–°–ü–ï–ß–ï–ù–ê"
        elif 0.75 >= network_security_ratio >= 0.6:
            return "‚ö° –û–ü–¢–ò–ú–ê–õ–¨–ù–ê"
        elif 0.6 > network_security_ratio >= 0.5:
            return "ü§¢ –ù–ï–î–û–û–ë–ï–°–ü–ï–ß–ï–ù–ê"
        elif network_security_ratio == 0:
            return 'üöß –î–ê–ù–ù–´–ï –ù–ï –ü–û–õ–£–ß–ï–ù–´...'
        else:
            return "ü§¨ –ù–ï–ë–ï–ó–û–ü–ê–°–ù–ê"

    def notification_text_network_summary(self, old: NetworkStats, new: NetworkStats, market: RuneMarketInfo):
        message = bold('üåê THORChain —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') + '\n'

        message += '\n'

        security_pb = progressbar(new.network_security_ratio, 1.0, 10)
        security_text = self.network_bond_security_text(new.network_security_ratio)
        message += f'üï∏Ô∏è –°–µ–π—á–∞—Å —Å–µ—Ç—å {bold(security_text)} {security_pb}.\n'

        active_nodes_change = bracketify(up_down_arrow(old.active_nodes, new.active_nodes, int_delta=True))
        standby_nodes_change = bracketify(up_down_arrow(old.active_nodes, new.active_nodes, int_delta=True))
        message += f"üñ•Ô∏è {bold(new.active_nodes)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥{active_nodes_change} " \
                   f"–∏ {bold(new.standby_nodes)} –Ω–æ–¥ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è{standby_nodes_change}.\n"

        # -- BOND

        current_bond_text = bold(pretty_money(new.total_active_bond_rune, postfix=RAIDO_GLYPH))
        current_bond_change = bracketify(
            up_down_arrow(old.total_active_bond_rune, new.total_active_bond_rune, money_delta=True))

        current_bond_usd_text = bold(pretty_dollar(new.total_active_bond_usd))
        current_bond_usd_change = bracketify(
            up_down_arrow(old.total_active_bond_usd, new.total_active_bond_usd, money_delta=True, money_prefix='$')
        )

        current_total_bond_text = bold(pretty_money(new.total_bond_rune, postfix=RAIDO_GLYPH))
        current_total_bond_change = bracketify(
            up_down_arrow(old.total_bond_rune, new.total_bond_rune, money_delta=True))

        current_total_bond_usd_text = bold(pretty_dollar(new.total_bond_usd))
        current_total_bond_usd_change = bracketify(
            up_down_arrow(old.total_bond_usd, new.total_bond_usd, money_delta=True, money_prefix='$')
        )

        message += f"üîó –ë–æ–Ω–¥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥: {current_bond_text}{current_bond_change} –∏–ª–∏ " \
                   f"{current_bond_usd_text}{current_bond_usd_change}.\n"

        message += f"üîó –ë–æ–Ω–¥ –≤—Å–µ—Ö –Ω–æ–¥: {current_total_bond_text}{current_total_bond_change} –∏–ª–∏ " \
                   f"{current_total_bond_usd_text}{current_total_bond_usd_change}.\n"

        # -- POOL

        current_pooled_text = bold(pretty_money(new.total_rune_pooled, postfix=RAIDO_GLYPH))
        current_pooled_change = bracketify(
            up_down_arrow(old.total_rune_pooled, new.total_rune_pooled, money_delta=True))

        current_pooled_usd_text = bold(pretty_dollar(new.total_pooled_usd))
        current_pooled_usd_change = bracketify(
            up_down_arrow(old.total_pooled_usd, new.total_pooled_usd, money_delta=True, money_prefix='$'))

        message += f"üèä –í—Å–µ–≥–æ –≤ –ø—É–ª–∞—Ö: {current_pooled_text}{current_pooled_change} –∏–ª–∏ " \
                   f"{current_pooled_usd_text}{current_pooled_usd_change}.\n"

        # -- LIQ

        current_liquidity_usd_text = bold(pretty_dollar(new.total_liquidity_usd))
        current_liquidity_usd_change = bracketify(
            up_down_arrow(old.total_liquidity_usd, new.total_liquidity_usd, money_delta=True, money_prefix='$'))

        message += f"üåä –í—Å–µ–≥–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (TVL): {current_liquidity_usd_text}{current_liquidity_usd_change}.\n"

        # -- TVL

        tlv_change = bracketify(
            up_down_arrow(old.total_locked_usd, new.total_locked_usd, money_delta=True, money_prefix='$'))
        message += f'üè¶ TVL + –±–æ–Ω–¥—ã –Ω–æ–¥: {code(pretty_dollar(new.total_locked_usd))}{tlv_change}.\n'

        # -- RESERVE

        reserve_change = bracketify(up_down_arrow(old.reserve_rune, new.reserve_rune,
                                                  postfix=RAIDO_GLYPH, money_delta=True))

        message += f'üí∞ –†–µ–∑–µ—Ä–≤—ã: {bold(pretty_money(new.reserve_rune, postfix=RAIDO_GLYPH))}{reserve_change}.\n'

        # --- FLOWS:

        message += '\n'

        if old.is_ok:
            # 24 h Add/withdrawal
            added_24h_rune = new.added_rune - old.added_rune
            withdrawn_24h_rune = new.withdrawn_rune - old.withdrawn_rune
            swap_volume_24h_rune = new.swap_volume_rune - old.swap_volume_rune
            switched_24h_rune = new.switched_rune - old.switched_rune

            add_rune_text = bold(pretty_money(added_24h_rune, prefix=RAIDO_GLYPH))
            withdraw_rune_text = bold(pretty_money(withdrawn_24h_rune, prefix=RAIDO_GLYPH))
            swap_rune_text = bold(pretty_money(swap_volume_24h_rune, prefix=RAIDO_GLYPH))
            switch_rune_text = bold(pretty_money(switched_24h_rune, prefix=RAIDO_GLYPH))

            price = new.usd_per_rune

            add_usd_text = pretty_dollar(added_24h_rune * price)
            withdraw_usd_text = pretty_dollar(withdrawn_24h_rune * price)
            swap_usd_text = pretty_dollar(swap_volume_24h_rune * price)
            switch_usd_text = pretty_dollar(switched_24h_rune * price)

            message += f'{ital("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:")}\n'

            if added_24h_rune:
                message += f'‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø—É–ª—ã: {add_rune_text} ({add_usd_text}).\n'
            if withdrawn_24h_rune:
                message += f'‚ûñ –í—ã–≤–µ–¥–µ–Ω–æ –∏–∑ –ø—É–ª–æ–≤: {withdraw_rune_text} ({withdraw_usd_text}).\n'
            if swap_volume_24h_rune:
                message += f'üîÄ –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: {swap_rune_text} ({swap_usd_text}) ' \
                           f'–ø—Ä–∏ {bold(new.swaps_24h)} –æ–±–º–µ–Ω–æ–≤ —Å–æ–≤–µ—Ä—à–µ–Ω–æ.\n'
            if switched_24h_rune:
                message += f'üíé Rune –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ –Ω–∞—Ç–∏–≤–Ω—ã–µ: {switch_rune_text} ({switch_usd_text}).\n'
            message += '\n'

        if abs(old.bonding_apy - new.bonding_apy) > 0.01:
            bonding_apy_change = bracketify(
                up_down_arrow(old.bonding_apy, new.bonding_apy, money_delta=True, postfix='%'))
        else:
            bonding_apy_change = ''

        if abs(old.liquidity_apy - new.liquidity_apy) > 0.01:
            liquidity_apy_change = bracketify(
                up_down_arrow(old.liquidity_apy, new.liquidity_apy, money_delta=True, postfix='%'))
        else:
            liquidity_apy_change = ''

        switch_rune_total_text = bold(pretty_money(new.switched_rune, prefix=RAIDO_GLYPH))
        message += (f'üíé –í—Å–µ–≥–æ Rune –ø–µ—Ä–µ–≤–µ–ª–∏ –≤ –Ω–∞—Ç–∏–≤–Ω—ã–µ: {switch_rune_total_text} '
                    f'({format_percent(new.switched_rune, market.total_supply)}).'
                    f'\n\n')

        message += f'üìà –î–æ—Ö–æ–¥ –æ—Ç –±–æ–Ω–¥–æ–≤ –≤ –Ω–æ–¥–∞—Ö, –≥–æ–¥–æ–≤—ã—Ö: {code(pretty_money(new.bonding_apy, postfix="%"))}{bonding_apy_change} –∏ ' \
                   f'–¥–æ—Ö–æ–¥ –æ—Ç –ø—É–ª–æ–≤ –≤ —Å—Ä–µ–¥–Ω–µ–º, –≥–æ–¥–æ–≤—ã—Ö: {code(pretty_money(new.liquidity_apy, postfix="%"))}{liquidity_apy_change}.\n'

        message += f'üõ°Ô∏è –í—ã–ø–ª–∞—á–µ–Ω–æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –æ—Ç IL (–Ω–µ–ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å): {code(pretty_dollar(new.loss_protection_paid_usd))}.\n'

        daily_users_change = bracketify(up_down_arrow(old.users_daily, new.users_daily, int_delta=True))
        monthly_users_change = bracketify(up_down_arrow(old.users_monthly, new.users_monthly, int_delta=True))
        message += f'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å: {code(new.users_daily)}{daily_users_change}, ' \
                   f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: {code(new.users_monthly)}{monthly_users_change}\n'

        message += '\n'

        active_pool_changes = bracketify(up_down_arrow(old.active_pool_count,
                                                       new.active_pool_count, int_delta=True))
        pending_pool_changes = bracketify(up_down_arrow(old.pending_pool_count,
                                                        new.pending_pool_count, int_delta=True))
        message += f'{bold(new.active_pool_count)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—É–ª–æ–≤{active_pool_changes} –∏ ' \
                   f'{bold(new.pending_pool_count)} –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—É–ª–æ–≤{pending_pool_changes}.\n'

        if new.next_pool_to_activate:
            next_pool_wait = self.seconds_human(new.next_pool_activation_ts - now_ts())
            next_pool = self.pool_link(new.next_pool_to_activate)
            message += f"–í–µ—Ä–æ—è—Ç–Ω–æ, –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—É–ª: {next_pool} —á–µ—Ä–µ–∑ {next_pool_wait}."
        else:
            message += f"–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –¥–æ—Å—Ç–æ–π–Ω–æ–≥–æ –ø—É–ª–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."

        return message

    # ------- NETWORK NODES -------

    TEXT_PIC_ACTIVE_NODES = '–ê–∫—Ç–∏–≤–Ω—ã–µ'
    TEXT_PIC_STANDBY_NODES = '–û–∂–∏–¥–∞—é—â–∏–µ'
    TEXT_PIC_ALL_NODES = '–í—Å–µ –Ω–æ–¥—ã'
    TEXT_PIC_NODE_DIVERSITY = '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–¥'
    TEXT_PIC_NODE_DIVERSITY_SUBTITLE = '–ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã'
    TEXT_PIC_OTHERS = '–î—Ä—É–≥–∏–µ'
    TEXT_PIC_UNKNOWN = '–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ'

    def _format_node_text(self, node: NodeInfo, add_status=False, extended_info=False):
        node_ip_link = link(f'https://www.infobyip.com/ip-{node.ip_address}.html', node.ip_address)
        thor_explore_url = get_explorer_url_to_address(self.cfg.network_id, Chains.THOR, node.node_address)
        node_thor_link = link(thor_explore_url, short_address(node.node_address))

        node_status = node.status.lower()
        if node_status == node.STANDBY:
            status = '–û–∂–∏–¥–∞–Ω–∏–µ'
        elif node_status == node.ACTIVE:
            status = '–ê–∫—Ç–∏–≤–Ω–∞'
        elif node_status == node.DISABLED:
            status = '–û—Ç–∫–ª—é—á–µ–Ω–∞!'
        else:
            status = node.status

        extra = ''
        if extended_info:
            if node.slash_points:
                extra += f", {bold(node.slash_points)} —à—Ç—Ä–∞—Ñ–æ–≤"
            if node.current_award:
                award_text = bold(pretty_money(node.current_award, postfix=RAIDO_GLYPH))
                extra += f", {award_text} –Ω–∞–≥—Ä–∞–¥—ã"

        status = f', ({pre(status)})' if add_status else ''
        return f'{bold(node_thor_link)} ({node_ip_link}, –≤–µ—Ä—Å–∏—è {node.version}) ' \
               f'—Å {bold(pretty_money(node.bond, postfix=RAIDO_GLYPH))} –±–æ–Ω–¥ {status}{extra}'.strip()

    def _node_bond_change_after_churn(self, changes: NodeSetChanges):
        bond_in, bond_out = changes.bond_churn_in, changes.bond_churn_out
        bond_delta = bond_in - bond_out
        return f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ–Ω–¥–∞: {code(short_money(bond_delta, postfix=RAIDO_GLYPH))}'

    def notification_text_for_node_churn(self, changes: NodeSetChanges):
        message = ''

        if changes.nodes_activated or changes.nodes_deactivated:
            message += bold('‚ôªÔ∏è –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –Ω–æ–¥') + '\n\n'

        message += self._make_node_list(changes.nodes_added, 'üÜï –ù–æ–≤—ã–µ –Ω–æ–¥—ã –ø–æ—è–≤–∏–ª–∏—Å—å:', add_status=True)
        message += self._make_node_list(changes.nodes_activated, '‚û°Ô∏è –ù–æ–¥—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–Ω—ã:')
        message += self._make_node_list(changes.nodes_deactivated, '‚¨ÖÔ∏èÔ∏è –ù–æ–¥—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã:')
        message += self._make_node_list(changes.nodes_removed, 'üóëÔ∏è –ù–æ–¥—ã –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å –∏–ª–∏ –∏—Å—á–µ–∑–ª–∏:', add_status=True)

        if changes.nodes_activated or changes.nodes_deactivated:
            message += self._node_bond_change_after_churn(changes)

        return message.rstrip()

    def node_list_text(self, nodes: List[NodeInfo], status, items_per_chunk=12):
        add_status = False
        if status == NodeInfo.ACTIVE:
            title = '‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–æ–¥—ã:'
            nodes = [n for n in nodes if n.is_active]
        elif status == NodeInfo.STANDBY:
            title = '‚è± –û–∂–∏–¥–∞—é—â–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–æ–¥—ã:'
            nodes = [n for n in nodes if n.is_standby]
        else:
            title = '‚ùî –ù–æ–¥—ã –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö:'
            nodes = [n for n in nodes if n.in_strange_status]
            add_status = True

        groups = list(grouper(items_per_chunk, nodes))

        starts = []
        current_start = 1
        for group in groups:
            starts.append(current_start)
            current_start += len(group)

        return [
            self._make_node_list(group,
                                 title if start == 1 else '',
                                 extended_info=True,
                                 add_status=add_status,
                                 start=start).rstrip()
            for start, group in zip(starts, groups)
        ]

    # ------ VERSION ------

    @staticmethod
    def node_version(v, data: NodeSetChanges, active=True):
        realm = data.active_only_nodes if active else data.nodes_all
        n_nodes = len(data.find_nodes_with_version(realm, v))
        return f"{code(v)} ({n_nodes} {plural(n_nodes, 'node', 'nodes')})"

    def notification_text_version_upgrade_progress(self,
                                                   data: NodeSetChanges,
                                                   ver_con: NodeVersionConsensus):
        msg = bold('üïñ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ THORChain\n\n')

        progress = ver_con.ratio * 100.0
        pb = progressbar(progress, 100.0, 14)

        msg += f'{pb} {progress:.0f} %\n'
        msg += f"{pre(ver_con.top_version_count)} –∏–∑ {pre(ver_con.total_active_node_count)} –Ω–æ–¥ " \
               f"–æ–±–Ω–æ–≤–∏–ª–∏—Å—å –¥–æ –≤–µ—Ä—Å–∏–∏ {pre(ver_con.top_version)}\n\n"

        cur_version_txt = self.node_version(data.current_active_version, data, active=True)
        msg += f"‚ö°Ô∏è –ê–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å–µ–π—á–∞—Å ‚Äì {cur_version_txt}\n" + \
               ital('* –≠—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥.') + '\n\n'

        return msg

    def notification_text_version_upgrade(self,
                                          data: NodeSetChanges,
                                          new_versions: List[VersionInfo],
                                          old_active_ver: VersionInfo,
                                          new_active_ver: VersionInfo):

        msg = bold('üí´ –û–±–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ THORChain') + '\n\n'

        def version_and_nodes(v, all=False):
            realm = data.nodes_all if all else data.active_only_nodes
            n_nodes = len(data.find_nodes_with_version(realm, v))
            return f"{code(v)} ({n_nodes} {plural(n_nodes, '–Ω–æ–¥–∞', '–Ω–æ–¥')})"

        current_active_version = data.current_active_version

        if new_versions:
            new_version_joined = ', '.join(version_and_nodes(v, all=True) for v in new_versions)
            msg += f"üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {new_version_joined}\n\n"

            msg += f"‚ö°Ô∏è –ê–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å–µ–π—á–∞—Å ‚Äì {version_and_nodes(current_active_version)}\n" + \
                   ital('* –≠—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥.') + '\n\n'

        if old_active_ver != new_active_ver:
            action = '—É–ª—É—á—à–∏–ª–∞—Å—å' if new_active_ver > old_active_ver else '–æ—Ç–∫–∞—Ç–∏–ª–∞—Å—å'
            emoji = 'üÜô' if new_active_ver > old_active_ver else '‚¨áÔ∏è'
            msg += (
                f"{emoji} {bold('–í–Ω–∏–º–∞–Ω–∏–µ!')} –ê–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ {bold(action)} "
                f"—Å –≤–µ—Ä—Å–∏–∏ {pre(old_active_ver)} "
                f"–¥–æ –≤–µ—Ä—Å–∏–∏ {version_and_nodes(new_active_ver)}\n\n"
            )

            cnt = data.version_counter(data.active_only_nodes)
            if len(cnt) == 1:
                msg += f"–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–æ–¥—ã –∏–º–µ—é—Ç –≤–µ—Ä—Å–∏—é {code(current_active_version)}\n"
            elif len(cnt) > 1:
                msg += bold(f"–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –Ω–æ–¥:") + '\n'
                for i, (v, count) in enumerate(cnt.most_common(5), start=1):
                    active_node = ' üëà' if v == current_active_version else ''
                    msg += f"{i}. {version_and_nodes(v)} {active_node}\n"
                msg += f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è ‚Äì {version_and_nodes(data.max_available_version)}\n"

        return msg

    # --------- CHAIN INFO SUMMARY ------------

    def text_chain_info(self, chain_infos: List[ThorChainInfo]):
        text = '‚õìÔ∏è ' + bold('THORChain –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–ª–æ–∫—á–µ–π–Ω–∞–º:') + '\n\n'
        for c in chain_infos:
            address_link = link(get_explorer_url_to_address(self.cfg.network_id, c.chain, c.address), '–°–ö–ê–ù')
            status = 'üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if c.halted else 'üÜó –ê–∫—Ç–∏–≤–µ–Ω'
            text += f'{bold(c.chain)}:\n' \
                    f'–°—Ç–∞—Ç—É—Å: {status}\n' \
                    f'–í—Ö–æ–¥—è—â–∏–π –∞–¥—Ä–µ—Å: {pre(c.address)} {address_link}\n'

            if c.router:
                router_link = link(get_explorer_url_to_address(self.cfg.network_id, c.chain, c.router), '–°–ö–ê–ù')
                text += f'–†–æ—É—Ç–µ—Ä: {pre(c.router)} {router_link}\n'

            text += f'–¶–µ–Ω–∞ –≥–∞–∑–∞: {pre(c.gas_rate)}\n\n'

        if not chain_infos:
            text += '–ò–Ω—Ñ–æ –æ –±–ª–æ–∫—á–µ–π–Ω–∞—Ö –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ...'

        return text.strip()

    # --------- MIMIR INFO ------------

    MIMIR_STANDARD_VALUE = "—Å—Ç–∞–Ω–¥–∞—Ä—Ç:"
    MIMIR_OUTRO = f'\n\nüîπ ‚Äì {ital("–ê–¥–º–∏–Ω –ú–∏–º–∏—Ä")}\n' \
                  f'üî∏ ‚Äì {ital("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–æ–¥")}\n' \
                  f'‚ñ™Ô∏è ‚Äì {ital("–ê–≤—Ç–æ–º–∞—Ç–∏–∫–∞")}'
    MIMIR_NO_DATA = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
    MIMIR_BLOCKS = '–±–ª–æ–∫–æ–≤'
    MIMIR_DISABLED = '–í–´–ö–õ–Æ–ß–ï–ù–û'
    MIMIR_YES = '–î–ê'
    MIMIR_NO = '–ù–ï–¢'
    MIMIR_UNDEFINED = '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
    MIMIR_LAST_CHANGE = '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ'

    def text_mimir_intro(self):
        text = f'üéÖ {bold("–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ú–∏–º–∏—Ä")}\n'
        cheatsheet_link = link(self.MIMIR_CHEAT_SHEET_URL, '–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç')
        what_is_mimir_link = link(self.MIMIR_DOC_LINK, "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∏–º–∏?")
        text += f"{what_is_mimir_link} –ê –µ—â–µ {cheatsheet_link}.\n\n"
        return text

    # --------- TRADING HALTED -----------

    def notification_text_trading_halted_multi(self, chain_infos: List[ThorChainInfo]):
        msg = ''

        halted_chains = ', '.join(c.chain for c in chain_infos if c.halted)
        if halted_chains:
            msg += f'üö®üö®üö® <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–∞—Ö: {code(halted_chains)}! ' \
                   f'–í–æ–∑–¥–µ—Ä–∂–∏—Ç–µ—Å—å –æ—Ç –æ–±–º–µ–Ω–æ–≤, –ø–æ–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª—è –Ω–µ –±—É–¥–µ—Ç —Å–Ω–æ–≤–∞ –∑–∞–ø—É—â–µ–Ω–∞! üö®üö®üö®\n\n'

        resumed_chains = ', '.join(c.chain for c in chain_infos if not c.halted)
        if resumed_chains:
            msg += f'‚úÖ <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –¢–æ—Ä–≥–æ–≤–ª—è —Å–Ω–æ–≤–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–∞—Ö: {code(resumed_chains)}!'

        return msg.strip()

    # ---------- BLOCK HEIGHT -----------

    TEXT_BLOCK_HEIGHT_CHART_TITLE = 'THORChain –±–ª–æ–∫–æ–≤ –≤ –º–∏–Ω—É—Ç'
    TEXT_BLOCK_HEIGHT_LEGEND_ACTUAL = '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–ª–æ–∫–æ–≤ –≤ –º–∏–Ω—É—Ç—É'
    TEXT_BLOCK_HEIGHT_LEGEND_EXPECTED = '–û–∂–∏–¥–∞–µ–º–∞—è (10 –±–ª–æ–∫–æ–≤/–º–∏–Ω)'

    def notification_text_block_stuck(self, stuck, time_without_new_block):
        good_time = time_without_new_block is not None and time_without_new_block > 1
        str_t = ital(self.seconds_human(time_without_new_block) if good_time else self.NA)
        if stuck:
            return f'üìõ {bold("THORChain –≤—ã—Å–æ—Ç–∞ –±–ª–æ–∫–æ–≤ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è")}!\n' \
                   f'–ù–æ–≤—ã–µ –±–ª–æ–∫–∏ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —É–∂–µ {str_t}.'
        else:
            return f"üÜó {bold('THORChain —Å–Ω–æ–≤–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–ª–æ–∫–∏!')}\n" \
                   f"–°–±–æ–π –¥–ª–∏–ª—Å—è {str_t}"

    @staticmethod
    def get_block_time_state_string(state, state_changed):
        if state == BlockSpeed.StateNormal:
            if state_changed:
                return 'üëå –°–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤ –≤–µ—Ä–Ω—É–ª–∞—Å—å –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π.'
            else:
                return 'üëå –°–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤ –≤ –Ω–æ—Ä–º–µ.'
        elif state == BlockSpeed.StateTooSlow:
            return 'üêå –ë–ª–æ–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ.'
        elif state == BlockSpeed.StateTooFast:
            return 'üèÉ –ë–ª–æ–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ.'
        else:
            return ''

    def notification_text_block_pace(self, state: str, block_speed: float):
        phrase = self.get_block_time_state_string(state, True)
        block_per_minute = self.format_bps(block_speed)
        return f'<b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –±–ª–æ–∫–æ–≤ THORChain</b>\n' \
               f'{phrase}\n' \
               f'–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç <code>{block_per_minute}</code> –±–ª–æ–∫–æ–≤ –≤ –º–∏–Ω—É—Ç—É.'

    def text_block_time_report(self, last_block, last_block_ts, recent_bps, state):
        phrase = self.get_block_time_state_string(state, False)
        block_per_minute = self.format_bps(recent_bps)
        ago = self.format_time_ago(last_block_ts)
        block_str = f"#{last_block}"
        return f'<b>THORChain —Ç–µ–º–ø—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –±–ª–æ–∫–æ–≤.</b>\n' \
               f'{phrase}\n' \
               f'–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è <code>{block_per_minute}</code> –±–ª–æ–∫–æ–≤ –≤ –º–∏–Ω—É—Ç—É.\n' \
               f'–ü–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞ THORChain: {code(block_str)} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {ago}).'

    # --------- MIMIR CHANGED -----------

    def notification_text_mimir_changed(self, changes: List[MimirChange], mimir: MimirHolder):
        if not changes:
            return ''

        text = 'üîî <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ú–∏–º–∏—Ä!</b>\n\n'

        for change in changes:
            old_value_fmt = code(self.format_mimir_value(change.old_value, change.entry))
            new_value_fmt = code(self.format_mimir_value(change.new_value, change.entry))
            name = code(change.entry.pretty_name if change.entry else change.name)

            e = change.entry
            if e:
                if e.source == e.SOURCE_AUTO:
                    text += bold('[ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ ]  ')
                elif e.source == e.SOURCE_ADMIN:
                    text += bold('[üë©‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ]  ')
                elif e.source == e.SOURCE_NODE:
                    text += bold('[ü§ù –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–æ–¥ ]  ')
                elif e.source == e.SOURCE_NODE_CEASED:
                    text += bold('[üíî –ú–∏–º–∏—Ä –Ω–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω ]  ')

            if change.kind == MimirChange.ADDED_MIMIR:
                text += (
                    f'‚ûï –ù–∞—Å—Ç—Ä–æ–π–∫–∞ "{name}" —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –Ω–æ–≤—ã–º –ú–∏–º–∏—Ä–æ–º. '
                    f'–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—ã–ª–æ: {old_value_fmt} ‚Üí '
                    f'–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–ª–æ: {new_value_fmt}‚ÄºÔ∏è'
                )
            elif change.kind == MimirChange.REMOVED_MIMIR:
                text += (
                    f'‚ûñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ú–∏–º–∏—Ä–∞ "{name}" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞! '
                    f'–û–Ω–∞ –∏–º–µ–ª–∞ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_value_fmt} ‚Üí '
                    f'—Ç–µ–ø–µ—Ä—å –æ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Å—Ç–∞–Ω—Ç–µ: {new_value_fmt}‚ÄºÔ∏è'
                )
            else:
                text += (
                    f'üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ú–∏–º–∏—Ä–∞ "{name}" –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞. '
                    f'–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_value_fmt} ‚Üí '
                    f'–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å: {new_value_fmt}‚ÄºÔ∏è'
                )
                if change.entry.automatic:
                    text += f' (–Ω–∞ –±–ª–æ–∫–µ #{ital(change.new_value)}).'
            text += '\n\n'

        text += link("https://docs.thorchain.org/how-it-works/governance#mimir", "–ß—Ç–æ —Ç–∞–∫–æ–µ Mimir?")

        return text

    # ------- NODE OP TOOLS -------

    BUTTON_NOP_ADD_NODES = '‚ûï –î–æ–±–∞–≤—å –Ω–æ–¥—ã'
    BUTTON_NOP_MANAGE_NODES = 'üñäÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'
    BUTTON_NOP_SETTINGS = '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'

    def pretty_node_desc(self, node: NodeInfo, name=None):
        addr = self.short_node_name(node.node_address, name)
        return f'{pre(addr)} ({bold(short_money(node.bond, prefix="R"))} –±–æ–Ω–¥)'

    TEXT_NOP_INTRO_HEADING = bold('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–Ω—Å—Ç—Ä–µ–º–µ–Ω—Ç—ã –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ù–æ–¥.')

    def text_node_op_welcome_text_part2(self, watch_list: dict, last_signal_ago: float):
        text = '–ú—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ' \
               '–∫–æ–≥–¥–∞ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ —Å–ª—É—á–∞–µ—Ç—Å—è —Å –Ω–æ–¥–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç–µ.\n\n'
        if watch_list:
            text += f'–£ –≤–∞—Å {len(watch_list)} –Ω–æ–¥ –≤ —Å–ø–∏—Å–∫–µ —Å–ª–µ–∂–µ–Ω–∏—è.'
        else:
            text += f'–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –µ—â–µ –ø–æ–∫–∞ –Ω–∏ –æ–¥–Ω–æ–π –Ω–æ–¥—ã –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–µ–∂–µ–Ω–∏—è. ' \
                    f'–ù–∞–∂–º–∏—Ç–µ "{ital(self.BUTTON_NOP_ADD_NODES)}" —Å–ø–µ—Ä–≤–∞ üëá.'

        text += f'\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –±—ã–ª: {ital(self.format_time_ago(last_signal_ago))}'
        if last_signal_ago > 60:
            text += 'üî¥'
        elif last_signal_ago > 20:
            text += 'üü†'
        else:
            text += 'üü¢'

        return text

    TEXT_NOP_MANAGE_LIST_TITLE = \
        '–í—ã –¥–æ–±–∞–≤–∏–ª–∏ <pre>{n}</pre> –Ω–æ–¥ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ —Å–ª–µ–∂–µ–Ω–∏—è. ' \
        '–í—ã –º–æ–∂–µ—Ç–µ —É–±—Ä–∞—Ç—å –Ω–æ–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–∂–µ–Ω–∏—è, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–ø–æ–Ω–∫–∏ —Å–Ω–∏–∑—É.'

    TEXT_NOP_ADD_INSTRUCTIONS = 'ü§ì –ï—Å–ª–∏ –≤–∞–º —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã –∞–¥—Ä–µ—Å–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≤–∞—Å –Ω–æ–¥, ' \
                                f'–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏—Ö —Å–ø–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ. ' \
                                f'–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å {pre("thorAbc5andD1so2on")} –∏–ª–∏ ' \
                                f'–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∏–ª–∏ –±–æ–ª–µ–µ —Å–∏–º–≤–æ–ª–æ–≤. ' \
                                f'–ò–º–µ–Ω–∞ –Ω–æ–¥ –≤ —Å–ø–∏—Å–∫–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–∞–º–∏, –∑–∞–ø—è—Ç—ã–º–∏ –∏–ª–∏ —ç–Ω—Ç–µ—Ä–∞–º–∏.\n\n' \
                                f'–ü—Ä–∏–º–µ—Ä: {pre("66ew, xqmm, 7nv9")}'
    BUTTON_NOP_ADD_ALL_NODES = '–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –Ω–æ–¥—ã'
    BUTTON_NOP_ADD_ALL_ACTIVE_NODES = '–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ'

    TEXT_NOP_SEARCH_NO_VARIANTS = '–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å ' \
                                  '–∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–ø–∏—Å–∫–æ–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω—ã—Ö –Ω–æ–¥.'
    TEXT_NOP_SEARCH_VARIANTS = '–ú—ã –Ω–∞—à–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –Ω–æ–¥—ã, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ –≤–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:'

    TEXT_NOP_SETTINGS_TITLE = '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–¥–µ—Å—å. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:'

    BUTTON_NOP_SETT_SLASHING = '–®—Ç—Ä–∞—Ñ—ã'
    BUTTON_NOP_SETT_VERSION = '–í–µ—Ä—Å–∏–∏'
    BUTTON_NOP_SETT_OFFLINE = '–û—Ñ—Ñ–ª–∞–π–Ω'
    BUTTON_NOP_SETT_CHURNING = '–ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ'
    BUTTON_NOP_SETT_BOND = '–ë–æ–Ω–¥'
    BUTTON_NOP_SETT_HEIGHT = '–í—ã—Å–æ—Ç–∞ –±–ª–æ–∫–æ–≤'
    BUTTON_NOP_SETT_IP_ADDR = 'IP –∞–¥—Ä.'
    BUTTON_NOP_SETT_PAUSE_ALL = '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'

    @staticmethod
    def text_enabled_disabled(is_on):
        return '–≤–∫–ª—é—á–µ–Ω—ã' if is_on else '–≤—ã–∫–ª—é—á–µ–Ω—ã'

    def text_nop_slash_enabled(self, is_on):
        en_text = self.text_enabled_disabled(is_on)
        return f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —à—Ç—Ä–∞—Ñ–Ω—ã—Ö –æ—á–∫–æ–≤ –Ω–æ–¥–∞–º {bold(en_text)}.'

    def text_nop_bond_is_enabled(self, is_on):
        en_text = self.text_enabled_disabled(is_on)
        return f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–æ–Ω–¥–∞ {bold(en_text)}.'

    def text_nop_new_version_enabled(self, is_on):
        en_text = self.text_enabled_disabled(is_on)
        return f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ {bold(en_text)}.\n\n' \
               f'<i>–ù–∞ —Å–ª–µ–¥—É—é—â–∏–µ–º —à–∞–≥–µ –≤—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –Ω–æ–¥.</i>'

    def text_nop_version_up_enabled(self, is_on):
        en_text = self.text_enabled_disabled(is_on)
        return f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ –Ω–æ–¥—ã {bold(en_text)}.'

    def text_nop_offline_enabled(self, is_on):
        en_text = self.text_enabled_disabled(is_on)
        return f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ –Ω–æ–¥—ã –≤ –æ—Ñ—Ñ–ª–∞–π–Ω –∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –æ–Ω–ª–∞–π–Ω {bold(en_text)}.\n\n' \
               f'<i>–ù–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö –≤—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã.</i>'

    def text_nop_churning_enabled(self, is_on):
        en_text = self.text_enabled_disabled(is_on)
        return f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–∏ –Ω–æ–¥ {bold(en_text)}.\n\n' \
               f'<i>–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, ' \
               f'–µ—Å–ª–∏ –≤–∞—à–∞ –Ω–æ–¥–∞ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã–π –Ω–∞–±–æ—Ä –Ω–æ–¥ –∏–ª–∏ –ø–æ–∫–∏–¥–∞–µ—Ç –µ–≥–æ.</i>'

    def text_nop_ip_address_enabled(self, is_on):
        en_text = self.text_enabled_disabled(is_on)
        return f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —Å–º–µ–Ω–µ IP –∞–¥—Ä–µ—Å–∞ {bold(en_text)}.\n\n' \
               f'<i>–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–æ–¥–∞ –≤–¥—Ä—É–≥ –∏–∑–º–µ–Ω–∏—Ç —Å–≤–æ–π IP –∞–¥—Ä–µ—Å.</i>'

    def text_nop_ask_offline_period(self, current):
        return f'–ö–∞–∫–æ–π –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π?\n\n' \
               f'–ï—Å–ª–∏ —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏ –≤–∞—à–µ–π –Ω–æ–¥—ã –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, ' \
               f'—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n' \
               f'–°–µ–π—á–∞—Å: {pre(self.seconds_human(current))}.'

    def text_nop_chain_height_enabled(self, is_on):
        en_text = self.text_enabled_disabled(is_on)
        return f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–∏—Å—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö –±–ª–æ–∫—á–µ–π–Ω–æ–≤ {bold(en_text)}.\n\n' \
               f'<i>–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–∞—à–∏ –±–ª–æ–∫—á–µ–π–Ω –∫–ª–∏–µ–Ω—Ç—ã –Ω–∞ –Ω–æ–¥–∞—Ö –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫–∏.</i>'

    BUTTON_NOP_LEAVE_ON = '‚úî –í–∫–ª.'
    BUTTON_NOP_LEAVE_OFF = '‚úî –í—ã–∫–ª.'
    BUTTON_NOP_TURN_ON = '–í–∫–ª.'
    BUTTON_NOP_TURN_OFF = '–í—ã–∫–ª.'

    BUTTON_NOP_INTERVALS = {
        '2m': '2 –º–∏–Ω',
        '5m': '5 –º–∏–Ω',
        '15m': '15 –º–∏–Ω',
        '30m': '30 –º–∏–Ω',
        '60m': '1 —á–∞—Å',
        '2h': '2 —á–∞—Å–∞',
        '6h': '6 —á.',
        '12h': '12 —á.',
        '24h': '1 –¥–µ–Ω—å',
        '3d': '3 –¥–Ω—è',
    }

    TEXT_NOP_SLASH_THRESHOLD = '–í—ã–±–µ—Ä–µ—Ç–µ –ø–æ—Ä–æ–≥ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ ' \
                               '—à—Ç—Ä–∞—Ñ–Ω—ã—Ö –æ—á–∫–∞—Ö (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤ —Ä–∞–π–æ–Ω–µ 5 - 10):'

    def text_nop_ask_slash_period(self, pts):
        return f'–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n' \
               f'–ö –ø—Ä–∏–º–µ—Ä—É, –µ—Å–ª–∏ –≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <i>10 –º–∏–Ω—É—Ç</i> –∏ –ø–æ—Ä–æ–≥ <i>{pts} –æ—á–∫–æ–≤</i>, —Ç–æ ' \
               f'–≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–∞—à–∞ –Ω–æ–¥–∞ –Ω–∞–±–µ—Ä–µ—Ç ' \
               f'<i>{pts} –æ—á–∫–æ–≤ —à—Ç—Ä–∞—Ñ–∞</i> –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ <i>10 –º–∏–Ω—É—Ç</i>.'

    def text_nop_ask_chain_height_lag_time(self, current_lag_time):
        return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. ' \
               '–ï—Å–ª–∏ –≤–∞—à–∞ –Ω–æ–¥–∞ –Ω–µ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –±–ª–æ–∫–∏ –±–æ–ª–µ–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º.\n\n' \
               '–ï—Å–ª–∏ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ —Ç–∏–ø–∏—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –±–ª–æ–∫–∞ –¥–ª—è –∫–∞–∫–æ–π-–ª–∏–±–æ —Ü–µ–ø–æ—á–∫–∏ –±–ª–æ–∫–æ–≤, ' \
               '—Ç–æ –æ–Ω–æ –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 150% –æ—Ç —Ç–∏–ø–∏—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (15 –º–∏–Ω—É—Ç –¥–ª—è BTC).'

    def text_nop_success_add_banner(self, node_addresses):
        node_addresses_text = ','.join([self.short_node_name(a) for a in node_addresses])
        node_addresses_text = node_addresses_text[:80]  # just in case!
        message = f'üòâ –£—Å–ø–µ—Ö! {node_addresses_text} –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫. ' \
                  f'–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ!'
        return message

    BUTTON_NOP_CLEAR_LIST = 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ ({n})'
    BUTTON_NOP_REMOVE_INACTIVE = '‚ùå –£–±—Ä–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ ({n})'
    BUTTON_NOP_REMOVE_DISCONNECTED = '‚ùå –£–±—Ä–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ ({n})'

    def text_nop_success_remove_banner(self, node_addresses):
        node_addresses_text = ','.join([self.short_node_name(a) for a in node_addresses])
        node_addresses_text = node_addresses_text[:120]  # just in case!
        return f'üòâ –£—Å–ø–µ—Ö! –í—ã —É–±—Ä–∞–ª–∏ –Ω–æ–¥—ã –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–∂–µ–Ω–∏—è: ' \
               f'{node_addresses_text} ({len(node_addresses)} –≤—Å–µ–≥–æ).'

    def notification_text_for_node_op_changes(self, c: NodeEvent):
        message = ''
        short_addr = self.node_link(c.address)
        if c.type == NodeEventType.SLASHING:
            data: EventDataSlash = c.data
            date_str = self.seconds_human(data.interval_sec)
            message = f'üî™ –ù–æ–¥–∞ {short_addr} –ø–æ–ª—É—á–∏–ª–∞ —à—Ç—Ä–∞—Ñ ' \
                      f'–Ω–∞ {bold(data.delta_pts)} –æ—á–∫–æ–≤ ‚âà{date_str} ' \
                      f'(—Å–µ–π—á–∞—Å –≤ —Å—É–º–º–µ: <i>{data.current_pts}</i> —à—Ç—Ä–∞—Ñ–Ω—ã—Ö –æ—á–∫–æ–≤)!'
        elif c.type == NodeEventType.VERSION_CHANGED:
            old, new = c.data
            message = f'üÜô –ù–æ–¥–∞ {short_addr} –æ–±–Ω–æ–≤–∏–ª–∞—Å—å —Å –≤–µ—Ä—Å–∏–∏ {ital(old)} –¥–æ {bold(new)}!'
        elif c.type == NodeEventType.NEW_VERSION_DETECTED:
            message = f'üÜï –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ü–û –Ω–æ–¥—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞! {bold(c.data)}! –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å—Å—è!'
        elif c.type == NodeEventType.IP_ADDRESS_CHANGED:
            old, new = c.data
            message = f'üè§ –ù–æ–¥–∞ {short_addr} —Å–º–µ–Ω–∏–ª–∞ —Å–≤–æ–π IP –∞–¥—Ä–µ—Å —Å {ital(old)} –Ω–∞ {bold(new)}!'
        elif c.type == NodeEventType.SERVICE_ONLINE:
            online, duration, service = c.data
            service = bold(str(service).upper())
            if online:
                message = f'‚úÖ –°–µ—Ä–≤–∏—Å {service} –Ω–æ–¥—ã {short_addr} –æ–ø—è—Ç—å –≤–µ—Ä–Ω—É–ª—Å—è –≤ <b>–æ–Ω–ª–∞–π–Ω</b>!'
            else:
                message = f'üî¥ –°–µ—Ä–≤–∏—Å {service} –Ω–æ–¥—ã {short_addr} —É—à–µ–ª –≤ <b>–æ—Ñ—Ñ–ª–∞–π–Ω</b> ' \
                          f'(—É–∂–µ –∫–∞–∫ {self.seconds_human(duration)})!'
        elif c.type == NodeEventType.CHURNING:
            verb = '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∞—Å—å ‚¨ÖÔ∏è' if c.data else '–≤—ã—à–ª–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ ‚û°Ô∏è'
            bond = c.node.bond
            message = f'üåê –ù–æ–¥–∞ {short_addr} ({short_money(bond)} {RAIDO_GLYPH} –±–æ–Ω–¥–∞) {bold(verb)}!'
        elif c.type in NodeEventType.BLOCK_HEIGHT:
            data: EventBlockHeight = c.data

            if data.is_sync:
                message = f'‚úÖ –ù–æ–¥–∞ {short_addr} –¥–æ–≥–Ω–∞–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ {pre(data.chain)}.'
            else:
                message = f'üî¥ –ù–æ–¥–∞ {short_addr} –Ω–∞ {pre(data.block_lag)} –ø–æ–∑–∞–¥–∏ ' \
                          f'–Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ {pre(data.chain)} (‚âà{self.seconds_human(data.how_long_behind)})!'

        return message

    # ------- BEST POOLS -------

    def notification_text_best_pools(self, pd: PoolDetailHolder, n_pools):
        no_pool_text = '–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ, –Ω–∞–≤–µ—Ä–Ω–æ–µ, –µ—â–µ –≥—Ä—É–∑–∏—Ç—Å—è...'
        text = '\n\n'.join([self.format_pool_top(top_pools, pd, title, no_pool_text, n_pools) for title, top_pools in [
            ('üíé –õ—É—á—à–∏–µ –≥–æ–¥–æ–≤—ã–µ %', pd.BY_APY),
            ('üí∏ –ë–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã', pd.BY_VOLUME_24h),
            ('üèä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å', pd.BY_DEPTH),
        ]])

        return text

    # ------------------------------------------

    DATE_TRANSLATOR = {
        'just now': '–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å',
        'never': '–Ω–∏–∫–æ–≥–¥–∞',
        'sec': '—Å–µ–∫',
        'min': '–º–∏–Ω',
        'hour': '—á–∞—Å',
        'hours': '—á–∞—Å',
        'day': '–¥–Ω',
        'days': '–¥–Ω',
        'ago': '–Ω–∞–∑–∞–¥',
    }

    def format_time_ago(self, d):
        return format_time_ago(d, translate=self.DATE_TRANSLATOR)

    def seconds_human(self, s):
        return seconds_human(s, translate=self.DATE_TRANSLATOR)

    # ----- BEP 2 ------

    def notification_text_bep2_movement(self, transfer: BEP2Transfer, rune_price: float):
        usd_amt = transfer.amount * rune_price
        from_link, to_link = self.link_to_bep2(transfer.from_addr), self.link_to_bep2(transfer.to_addr)
        pf = ' ' + BNB_RUNE_SYMBOL
        tf_link = get_explorer_url_to_tx(self.cfg.network_id, Chains.BNB, transfer.tx_hash)
        return (f'<b>Ô∏è{RAIDO_GLYPH} –ö—Ä—É–ø–Ω—ã–π {link(tf_link, "–ø–µ—Ä–µ–≤–æ–¥")} BEP2 Rune:</b>\n'
                f'{pre(short_money(transfer.amount, postfix=pf))} '
                f'({ital(short_dollar(usd_amt, self.SHORT_MONEY_LOC))}) '
                f'–æ—Ç {from_link} ‚û°Ô∏è –∫ {to_link}.')

    def notification_text_cex_flow(self, bep2flow: BEP2CEXFlow, rune_price: float):
        return (f'üå¨Ô∏è <b>BEP2.Rune –ø–æ—Ç–æ–∫–∏ —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–≤—ã—Ö –±–∏—Ä–∂ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏</b>\n'
                f'–ó–∞–≤–µ–ª–∏: {pre(short_money(bep2flow.rune_cex_inflow, postfix=RAIDO_GLYPH))} '
                f'({short_dollar(bep2flow.rune_cex_inflow * rune_price)})\n'
                f'–í—ã–≤–µ–ª–∏: {pre(short_money(bep2flow.rune_cex_outflow, postfix=RAIDO_GLYPH))} '
                f'({short_dollar(bep2flow.rune_cex_outflow * rune_price)})\n'
                f'–ü–æ—Ç–æ–∫: {pre(short_money(bep2flow.rune_cex_netflow, postfix=RAIDO_GLYPH))} '
                f'({short_dollar(bep2flow.rune_cex_netflow * rune_price)})')
